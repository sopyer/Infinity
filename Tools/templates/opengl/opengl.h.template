@require(passthru, functions, enums, options, version, extensions)
/* WARNING: This file was automatically generated */
/* Do not edit. */

#pragma once

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

/* -------------------------------- DATA TYPES ------------------------------- */

#if defined(_WIN32)
#define GLAPICALL __stdcall
typedef int (GLAPICALL * PGLAPI_PROC)();
#else
#define GLAPICALL
typedef void (* PGLAPI_PROC)();
#endif

typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef signed char GLbyte;
typedef short GLshort;
typedef int GLint;
typedef unsigned char GLubyte;
typedef unsigned short GLushort;
typedef unsigned int GLuint;
typedef int GLsizei;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef char GLchar;
typedef unsigned short GLhalf;
typedef ptrdiff_t GLintptr;
typedef ptrdiff_t GLsizeiptr;
typedef int64_t GLint64;
typedef uint64_t GLuint64;
typedef struct __GLsync *GLsync;
typedef void (GLAPICALL *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);

/* ----------------------------------- ENUMS --------------------------------- */

@enums

/* --------------------------------- FUNCTIONS ------------------------------- */

enum {
@for cat,funcs in functions:
    @for f in funcs:
    EGLAPI_gl@f.name,
    @end
@end
    EGLAPI_COUNT
};

typedef union {char* n; PGLAPI_PROC f;} GLAPI[EGLAPI_COUNT];
extern GLAPI glapi;


@for cat,funcs in functions:
#define GL_@cat

    @for f in funcs:
typedef @f.returntype (GLAPICALL * PGLAPI@f.name.upper()_PROC)(@f.param_list_string());
    @end

    @for f in funcs:
#define gl@f.name ((PGLAPI@f.name.upper()_PROC)glapi[EGLAPI_gl@f.name].f)
    @end

@end

void importOpenGL(void);

#ifdef __cplusplus
}
#endif
