@require(passthru, functions, enums, options, version, extensions)
/* WARNING: This file was automatically generated */
/* Do not edit. */

#include "opengl.h"

#ifdef __cplusplus
extern "C" {
#endif


/* ---------------------- Function pointer definitions --------------------- */
GLAPI glapi = {
@for category,funcs in functions:
/* GL_@category */
/* @str(len(funcs)) functions */
@for f in funcs:
    "gl@f.name",
@end
@end
};

/* ------------------ code from Slavomir Kaslev's gl3w ----------------- */

#ifdef _WIN32
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>

void importOpenGL(void)
{
    uintptr_t i;
    HMODULE libgl;
    
    libgl = LoadLibraryA("opengl32.dll");
    for(i = 0 ; i < EGLAPI_COUNT; i++){
        PGLAPI_PROC res = wglGetProcAddress(glapi[i].n);
        if (!res) {res = GetProcAddress(libgl, glapi[i].n);}
        glapi[i].f = res;
    }
}
#elif defined(__APPLE__) || defined(__APPLE_CC__)
#include <Carbon/Carbon.h>

void importOpenGL(void)
{
    uintptr_t i;
    CFBundleRef bundle;
    CFURLRef bundleURL;

    bundleURL = CFURLCreateWithFileSystemPath(kCFAllocatorDefault,
                CFSTR("/System/Library/Frameworks/OpenGL.framework"),
                kCFURLPOSIXPathStyle, true);
    bundle = CFBundleCreate(kCFAllocatorDefault, bundleURL);
    for(i = 0 ; i < EGLAPI_COUNT; i++){
        PGLAPI_PROC res;

        CFStringRef procname = CFStringCreateWithCString(kCFAllocatorDefault, glapi[i].n,
                    kCFStringEncodingASCII);
        glapi[i].f = CFBundleGetFunctionPointerForName(bundle, procname);
        CFRelease(procname);
    }
    CFRelease(bundle);
    CFRelease(bundleURL);
}
#elif defined(ANDROID)
#include <EGL/egl.h>

void importOpenGL(void)
{
    uintptr_t i;

    for(i = 0 ; i < EGLAPI_COUNT; i++){
        glapi[i].f = eglGetProcAddress(glapi[i].n);
    }
}
#else
#include <dlfcn.h>
#include <GL/glx.h>

void importOpenGL(void)
{
    uintptr_t i;
    void *libgl;
    
    libgl = dlopen("libGL.so.1", RTLD_LAZY | RTLD_GLOBAL);
    for(i = 0 ; i < EGLAPI_COUNT; i++){
        PGLAPI_PROC res = glXGetProcAddress((const GLubyte *) glapi[i].n);
        if (!res) {res = dlsym(libgl, glapi[i].n);}
        glapi[i].f = res;
    }
}
#endif

#ifdef __cplusplus
}
#endif
