/* WARNING: This file was automatically generated */
/* Do not edit. */

#pragma once

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

/* -------------------------------- DATA TYPES ------------------------------- */

#if defined(_WIN32)
#define GLAPICALL __stdcall
typedef int (GLAPICALL * PGLAPI_PROC)();
#else
#define GLAPICALL
typedef void (* PGLAPI_PROC)();
#endif

typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef signed char GLbyte;
typedef short GLshort;
typedef int GLint;
typedef unsigned char GLubyte;
typedef unsigned short GLushort;
typedef unsigned int GLuint;
typedef int GLsizei;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef char GLchar;
typedef unsigned short GLhalf;
typedef ptrdiff_t GLintptr;
typedef ptrdiff_t GLsizeiptr;
typedef int64_t GLint64;
typedef uint64_t GLuint64;
typedef struct __GLsync *GLsync;
typedef void (GLAPICALL *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);

/* ----------------------------------- ENUMS --------------------------------- */

/* GL_VERSION_1_0 */

#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_FALSE 0
#define GL_TRUE 1
#define GL_POINTS 0x0000
#define GL_LINES 0x0001
#define GL_LINE_LOOP 0x0002
#define GL_LINE_STRIP 0x0003
#define GL_TRIANGLES 0x0004
#define GL_TRIANGLE_STRIP 0x0005
#define GL_TRIANGLE_FAN 0x0006
#define GL_NEVER 0x0200
#define GL_LESS 0x0201
#define GL_EQUAL 0x0202
#define GL_LEQUAL 0x0203
#define GL_GREATER 0x0204
#define GL_NOTEQUAL 0x0205
#define GL_GEQUAL 0x0206
#define GL_ALWAYS 0x0207
#define GL_ZERO 0
#define GL_ONE 1
#define GL_SRC_COLOR 0x0300
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_SRC_ALPHA 0x0302
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_DST_ALPHA 0x0304
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_DST_COLOR 0x0306
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_NONE 0
#define GL_FRONT_LEFT 0x0400
#define GL_FRONT_RIGHT 0x0401
#define GL_BACK_LEFT 0x0402
#define GL_BACK_RIGHT 0x0403
#define GL_FRONT 0x0404
#define GL_BACK 0x0405
#define GL_LEFT 0x0406
#define GL_RIGHT 0x0407
#define GL_FRONT_AND_BACK 0x0408
#define GL_NO_ERROR 0
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_VALUE 0x0501
#define GL_INVALID_OPERATION 0x0502
#define GL_OUT_OF_MEMORY 0x0505
#define GL_CW 0x0900
#define GL_CCW 0x0901
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_FRONT_FACE 0x0B46
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_FUNC 0x0B74
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_VIEWPORT 0x0BA2
#define GL_DITHER 0x0BD0
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_SRC 0x0BE1
#define GL_BLEND 0x0BE2
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_DRAW_BUFFER 0x0C01
#define GL_READ_BUFFER 0x0C02
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_DOUBLEBUFFER 0x0C32
#define GL_STEREO 0x0C33
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_2D 0x0DE1
#define GL_TEXTURE_WIDTH 0x1000
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_DONT_CARE 0x1100
#define GL_FASTEST 0x1101
#define GL_NICEST 0x1102
#define GL_BYTE 0x1400
#define GL_UNSIGNED_BYTE 0x1401
#define GL_SHORT 0x1402
#define GL_UNSIGNED_SHORT 0x1403
#define GL_INT 0x1404
#define GL_UNSIGNED_INT 0x1405
#define GL_FLOAT 0x1406
#define GL_CLEAR 0x1500
#define GL_AND 0x1501
#define GL_AND_REVERSE 0x1502
#define GL_COPY 0x1503
#define GL_AND_INVERTED 0x1504
#define GL_NOOP 0x1505
#define GL_XOR 0x1506
#define GL_OR 0x1507
#define GL_NOR 0x1508
#define GL_EQUIV 0x1509
#define GL_INVERT 0x150A
#define GL_OR_REVERSE 0x150B
#define GL_COPY_INVERTED 0x150C
#define GL_OR_INVERTED 0x150D
#define GL_NAND 0x150E
#define GL_SET 0x150F
#define GL_TEXTURE 0x1702
#define GL_COLOR 0x1800
#define GL_DEPTH 0x1801
#define GL_STENCIL 0x1802
#define GL_STENCIL_INDEX 0x1901
#define GL_DEPTH_COMPONENT 0x1902
#define GL_RED 0x1903
#define GL_GREEN 0x1904
#define GL_BLUE 0x1905
#define GL_ALPHA 0x1906
#define GL_RGB 0x1907
#define GL_RGBA 0x1908
#define GL_POINT 0x1B00
#define GL_LINE 0x1B01
#define GL_FILL 0x1B02
#define GL_KEEP 0x1E00
#define GL_REPLACE 0x1E01
#define GL_INCR 0x1E02
#define GL_DECR 0x1E03
#define GL_VENDOR 0x1F00
#define GL_RENDERER 0x1F01
#define GL_VERSION 0x1F02
#define GL_EXTENSIONS 0x1F03
#define GL_NEAREST 0x2600
#define GL_LINEAR 0x2601
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_REPEAT 0x2901

/* GL_VERSION_1_1 */

#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_DOUBLE 0x140A
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_R3_G3_B2 0x2A10
#define GL_RGB4 0x804F
#define GL_RGB5 0x8050
#define GL_RGB8 0x8051
#define GL_RGB10 0x8052
#define GL_RGB12 0x8053
#define GL_RGB16 0x8054
#define GL_RGBA2 0x8055
#define GL_RGBA4 0x8056
#define GL_RGB5_A1 0x8057
#define GL_RGBA8 0x8058
#define GL_RGB10_A2 0x8059
#define GL_RGBA12 0x805A
#define GL_RGBA16 0x805B

/* GL_VERSION_1_2 */

#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_TEXTURE_3D 0x806F
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_TEXTURE_DEPTH 0x8071
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_BGR 0x80E0
#define GL_BGRA 0x80E1
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E

/* GL_VERSION_1_3 */

#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_MULTISAMPLE 0x809D
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLES 0x80A9
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_COMPRESSED_RGB 0x84ED
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_CLAMP_TO_BORDER 0x812D

/* GL_VERSION_1_4 */

#define GL_BLEND_DST_RGB 0x80C8
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_MIRRORED_REPEAT 0x8370
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_INCR_WRAP 0x8507
#define GL_DECR_WRAP 0x8508
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_BLEND_COLOR 0x8005
#define GL_BLEND_EQUATION 0x8009
#define GL_CONSTANT_COLOR 0x8001
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_CONSTANT_ALPHA 0x8003
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_FUNC_SUBTRACT 0x800A
#define GL_MIN 0x8007
#define GL_MAX 0x8008

/* GL_VERSION_1_5 */

#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_USAGE 0x8765
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_CURRENT_QUERY 0x8865
#define GL_QUERY_RESULT 0x8866
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_ARRAY_BUFFER 0x8892
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_READ_ONLY 0x88B8
#define GL_WRITE_ONLY 0x88B9
#define GL_READ_WRITE 0x88BA
#define GL_BUFFER_ACCESS 0x88BB
#define GL_BUFFER_MAPPED 0x88BC
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_STREAM_DRAW 0x88E0
#define GL_STREAM_READ 0x88E1
#define GL_STREAM_COPY 0x88E2
#define GL_STATIC_DRAW 0x88E4
#define GL_STATIC_READ 0x88E5
#define GL_STATIC_COPY 0x88E6
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_DYNAMIC_READ 0x88E9
#define GL_DYNAMIC_COPY 0x88EA
#define GL_SAMPLES_PASSED 0x8914
#define GL_SRC1_ALPHA 0x8589

/* GL_VERSION_2_0 */

#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_DRAW_BUFFER2 0x8827
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER8 0x882D
#define GL_DRAW_BUFFER9 0x882E
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_DRAW_BUFFER12 0x8831
#define GL_DRAW_BUFFER13 0x8832
#define GL_DRAW_BUFFER14 0x8833
#define GL_DRAW_BUFFER15 0x8834
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_VERTEX_SHADER 0x8B31
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_SHADER_TYPE 0x8B4F
#define GL_FLOAT_VEC2 0x8B50
#define GL_FLOAT_VEC3 0x8B51
#define GL_FLOAT_VEC4 0x8B52
#define GL_INT_VEC2 0x8B53
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC4 0x8B55
#define GL_BOOL 0x8B56
#define GL_BOOL_VEC2 0x8B57
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC4 0x8B59
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT3 0x8B5B
#define GL_FLOAT_MAT4 0x8B5C
#define GL_SAMPLER_1D 0x8B5D
#define GL_SAMPLER_2D 0x8B5E
#define GL_SAMPLER_3D 0x8B5F
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_DELETE_STATUS 0x8B80
#define GL_COMPILE_STATUS 0x8B81
#define GL_LINK_STATUS 0x8B82
#define GL_VALIDATE_STATUS 0x8B83
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_LOWER_LEFT 0x8CA1
#define GL_UPPER_LEFT 0x8CA2
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5

/* GL_VERSION_2_1 */

#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_SRGB 0x8C40
#define GL_SRGB8 0x8C41
#define GL_SRGB_ALPHA 0x8C42
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49

/* GL_VERSION_3_0 */

#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_CLIP_DISTANCE0 0x3000
#define GL_CLIP_DISTANCE1 0x3001
#define GL_CLIP_DISTANCE2 0x3002
#define GL_CLIP_DISTANCE3 0x3003
#define GL_CLIP_DISTANCE4 0x3004
#define GL_CLIP_DISTANCE5 0x3005
#define GL_CLIP_DISTANCE6 0x3006
#define GL_CLIP_DISTANCE7 0x3007
#define GL_MAX_CLIP_DISTANCES 0x0D32
#define GL_MAJOR_VERSION 0x821B
#define GL_MINOR_VERSION 0x821C
#define GL_NUM_EXTENSIONS 0x821D
#define GL_CONTEXT_FLAGS 0x821E
#define GL_COMPRESSED_RED 0x8225
#define GL_COMPRESSED_RG 0x8226
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_RGBA32F 0x8814
#define GL_RGB32F 0x8815
#define GL_RGBA16F 0x881A
#define GL_RGB16F 0x881B
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_FIXED_ONLY 0x891D
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_RGB9_E5 0x8C3D
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_RGBA32UI 0x8D70
#define GL_RGB32UI 0x8D71
#define GL_RGBA16UI 0x8D76
#define GL_RGB16UI 0x8D77
#define GL_RGBA8UI 0x8D7C
#define GL_RGB8UI 0x8D7D
#define GL_RGBA32I 0x8D82
#define GL_RGB32I 0x8D83
#define GL_RGBA16I 0x8D88
#define GL_RGB16I 0x8D89
#define GL_RGBA8I 0x8D8E
#define GL_RGB8I 0x8D8F
#define GL_RED_INTEGER 0x8D94
#define GL_GREEN_INTEGER 0x8D95
#define GL_BLUE_INTEGER 0x8D96
#define GL_RGB_INTEGER 0x8D98
#define GL_RGBA_INTEGER 0x8D99
#define GL_BGR_INTEGER 0x8D9A
#define GL_BGRA_INTEGER 0x8D9B
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_QUERY_WAIT 0x8E13
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_DEPTH_STENCIL 0x84F9
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_FRAMEBUFFER 0x8D40
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX8 0x8D48
#define GL_STENCIL_INDEX16 0x8D49
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_MAX_SAMPLES 0x8D57
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_HALF_FLOAT 0x140B
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_RG 0x8227
#define GL_RG_INTEGER 0x8228
#define GL_R8 0x8229
#define GL_R16 0x822A
#define GL_RG8 0x822B
#define GL_RG16 0x822C
#define GL_R16F 0x822D
#define GL_R32F 0x822E
#define GL_RG16F 0x822F
#define GL_RG32F 0x8230
#define GL_R8I 0x8231
#define GL_R8UI 0x8232
#define GL_R16I 0x8233
#define GL_R16UI 0x8234
#define GL_R32I 0x8235
#define GL_R32UI 0x8236
#define GL_RG8I 0x8237
#define GL_RG8UI 0x8238
#define GL_RG16I 0x8239
#define GL_RG16UI 0x823A
#define GL_RG32I 0x823B
#define GL_RG32UI 0x823C
#define GL_VERTEX_ARRAY_BINDING 0x85B5

/* GL_VERSION_3_1 */

#define GL_SAMPLER_2D_RECT 0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#define GL_SAMPLER_BUFFER 0x8DC2
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_TEXTURE_RECTANGLE 0x84F5
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#define GL_R8_SNORM 0x8F94
#define GL_RG8_SNORM 0x8F95
#define GL_RGB8_SNORM 0x8F96
#define GL_RGBA8_SNORM 0x8F97
#define GL_R16_SNORM 0x8F98
#define GL_RG16_SNORM 0x8F99
#define GL_RGB16_SNORM 0x8F9A
#define GL_RGBA16_SNORM 0x8F9B
#define GL_SIGNED_NORMALIZED 0x8F9C
#define GL_PRIMITIVE_RESTART 0x8F9D
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_UNIFORM_TYPE 0x8A37
#define GL_UNIFORM_SIZE 0x8A38
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_INVALID_INDEX 0xFFFFFFFFu

/* GL_VERSION_3_2 */

#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_LINES_ADJACENCY 0x000A
#define GL_LINE_STRIP_ADJACENCY 0x000B
#define GL_TRIANGLES_ADJACENCY 0x000C
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#define GL_PROGRAM_POINT_SIZE 0x8642
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_GEOMETRY_SHADER 0x8DD9
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#define GL_CONTEXT_PROFILE_MASK 0x9126
#define GL_DEPTH_CLAMP 0x864F
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_PROVOKING_VERTEX 0x8E4F
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_OBJECT_TYPE 0x9112
#define GL_SYNC_CONDITION 0x9113
#define GL_SYNC_STATUS 0x9114
#define GL_SYNC_FLAGS 0x9115
#define GL_SYNC_FENCE 0x9116
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_UNSIGNALED 0x9118
#define GL_SIGNALED 0x9119
#define GL_ALREADY_SIGNALED 0x911A
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_CONDITION_SATISFIED 0x911C
#define GL_WAIT_FAILED 0x911D
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFFull
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_SAMPLE_POSITION 0x8E50
#define GL_SAMPLE_MASK 0x8E51
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_MAX_INTEGER_SAMPLES 0x9110

/* GL_VERSION_3_3 */

#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#define GL_SRC1_COLOR 0x88F9
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#define GL_SAMPLER_BINDING 0x8919
#define GL_RGB10_A2UI 0x906F
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#define GL_TIME_ELAPSED 0x88BF
#define GL_TIMESTAMP 0x8E28
#define GL_INT_2_10_10_10_REV 0x8D9F

/* GL_VERSION_4_0 */

#define GL_SAMPLE_SHADING 0x8C36
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_MAX_VERTEX_STREAMS 0x8E71
#define GL_DOUBLE_VEC2 0x8FFC
#define GL_DOUBLE_VEC3 0x8FFD
#define GL_DOUBLE_VEC4 0x8FFE
#define GL_DOUBLE_MAT2 0x8F46
#define GL_DOUBLE_MAT3 0x8F47
#define GL_DOUBLE_MAT4 0x8F48
#define GL_DOUBLE_MAT2x3 0x8F49
#define GL_DOUBLE_MAT2x4 0x8F4A
#define GL_DOUBLE_MAT3x2 0x8F4B
#define GL_DOUBLE_MAT3x4 0x8F4C
#define GL_DOUBLE_MAT4x2 0x8F4D
#define GL_DOUBLE_MAT4x3 0x8F4E
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#define GL_MAX_SUBROUTINES 0x8DE7
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#define GL_PATCHES 0x000E
#define GL_PATCH_VERTICES 0x8E72
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#define GL_TESS_GEN_MODE 0x8E76
#define GL_TESS_GEN_SPACING 0x8E77
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#define GL_TESS_GEN_POINT_MODE 0x8E79
#define GL_ISOLINES 0x8E7A
#define GL_QUADS 0x0007
#define GL_FRACTIONAL_ODD 0x8E7B
#define GL_FRACTIONAL_EVEN 0x8E7C
#define GL_MAX_PATCH_VERTICES 0x8E7D
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_TESS_EVALUATION_SHADER 0x8E87
#define GL_TESS_CONTROL_SHADER 0x8E88
#define GL_TRANSFORM_FEEDBACK 0x8E22
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#define GL_MAX_VERTEX_STREAMS 0x8E71

/* GL_VERSION_4_1 */

#define GL_FIXED 0x140C
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_LOW_FLOAT 0x8DF0
#define GL_MEDIUM_FLOAT 0x8DF1
#define GL_HIGH_FLOAT 0x8DF2
#define GL_LOW_INT 0x8DF3
#define GL_MEDIUM_INT 0x8DF4
#define GL_HIGH_INT 0x8DF5
#define GL_SHADER_COMPILER 0x8DFA
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#define GL_MAX_VARYING_VECTORS 0x8DFC
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#define GL_RGB565 0x8D62
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#define GL_VERTEX_SHADER_BIT 0x00000001
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#define GL_PROGRAM_SEPARABLE 0x8258
#define GL_ACTIVE_PROGRAM 0x8259
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#define GL_MAX_VIEWPORTS 0x825B
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#define GL_UNDEFINED_VERTEX 0x8260

/* GL_VERSION_4_2 */

#define GL_COPY_READ_BUFFER_BINDING 0x8F36
#define GL_COPY_WRITE_BUFFER_BINDING 0x8F37
#define GL_TRANSFORM_FEEDBACK_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_PAUSED 0x8E23
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0x9127
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0x9129
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0x912A
#define GL_PACK_COMPRESSED_BLOCK_WIDTH 0x912B
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0x912C
#define GL_PACK_COMPRESSED_BLOCK_DEPTH 0x912D
#define GL_PACK_COMPRESSED_BLOCK_SIZE 0x912E
#define GL_NUM_SAMPLE_COUNTS 0x9380
#define GL_MIN_MAP_BUFFER_ALIGNMENT 0x90BC
#define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#define GL_UNIFORM_BARRIER_BIT 0x00000004
#define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#define GL_COMMAND_BARRIER_BIT 0x00000040
#define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#define GL_MAX_IMAGE_UNITS 0x8F38
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#define GL_IMAGE_BINDING_NAME 0x8F3A
#define GL_IMAGE_BINDING_LEVEL 0x8F3B
#define GL_IMAGE_BINDING_LAYERED 0x8F3C
#define GL_IMAGE_BINDING_LAYER 0x8F3D
#define GL_IMAGE_BINDING_ACCESS 0x8F3E
#define GL_IMAGE_1D 0x904C
#define GL_IMAGE_2D 0x904D
#define GL_IMAGE_3D 0x904E
#define GL_IMAGE_2D_RECT 0x904F
#define GL_IMAGE_CUBE 0x9050
#define GL_IMAGE_BUFFER 0x9051
#define GL_IMAGE_1D_ARRAY 0x9052
#define GL_IMAGE_2D_ARRAY 0x9053
#define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#define GL_IMAGE_2D_MULTISAMPLE 0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#define GL_INT_IMAGE_1D 0x9057
#define GL_INT_IMAGE_2D 0x9058
#define GL_INT_IMAGE_3D 0x9059
#define GL_INT_IMAGE_2D_RECT 0x905A
#define GL_INT_IMAGE_CUBE 0x905B
#define GL_INT_IMAGE_BUFFER 0x905C
#define GL_INT_IMAGE_1D_ARRAY 0x905D
#define GL_INT_IMAGE_2D_ARRAY 0x905E
#define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#define GL_MAX_IMAGE_SAMPLES 0x906D
#define GL_IMAGE_BINDING_FORMAT 0x906E
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#define GL_COMPRESSED_RGBA_BPTC_UNORM 0x8E8C
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0x8E8D
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0x8E8F
#define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F

/* GL_VERSION_4_3 */

#define GL_NUM_SHADING_LANGUAGE_VERSIONS 0x82E9
#define GL_VERTEX_ATTRIB_ARRAY_LONG 0x874E
#define GL_COMPRESSED_RGB8_ETC2 0x9274
#define GL_COMPRESSED_SRGB8_ETC2 0x9275
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#define GL_COMPRESSED_R11_EAC 0x9270
#define GL_COMPRESSED_SIGNED_R11_EAC 0x9271
#define GL_COMPRESSED_RG11_EAC 0x9272
#define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273
#define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#define GL_MAX_ELEMENT_INDEX 0x8D6B
#define GL_COMPUTE_SHADER 0x91B9
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF
#define GL_COMPUTE_WORK_GROUP_SIZE 0x8267
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED
#define GL_DISPATCH_INDIRECT_BUFFER 0x90EE
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
#define GL_COMPUTE_SHADER_BIT 0x00000020
#define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#define GL_DEBUG_SOURCE_API 0x8246
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#define GL_DEBUG_SOURCE_APPLICATION 0x824A
#define GL_DEBUG_SOURCE_OTHER 0x824B
#define GL_DEBUG_TYPE_ERROR 0x824C
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#define GL_DEBUG_TYPE_PORTABILITY 0x824F
#define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#define GL_DEBUG_TYPE_OTHER 0x8251
#define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#define GL_DEBUG_LOGGED_MESSAGES 0x9145
#define GL_DEBUG_SEVERITY_HIGH 0x9146
#define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#define GL_DEBUG_SEVERITY_LOW 0x9148
#define GL_DEBUG_TYPE_MARKER 0x8268
#define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#define GL_DEBUG_TYPE_POP_GROUP 0x826A
#define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#define GL_BUFFER 0x82E0
#define GL_SHADER 0x82E1
#define GL_PROGRAM 0x82E2
#define GL_VERTEX_ARRAY 0x8074
#define GL_QUERY 0x82E3
#define GL_PROGRAM_PIPELINE 0x82E4
#define GL_SAMPLER 0x82E6
#define GL_MAX_LABEL_LENGTH 0x82E8
#define GL_DEBUG_OUTPUT 0x92E0
#define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#define GL_MAX_UNIFORM_LOCATIONS 0x826E
#define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311
#define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#define GL_MAX_FRAMEBUFFER_WIDTH 0x9315
#define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316
#define GL_MAX_FRAMEBUFFER_LAYERS 0x9317
#define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318
#define GL_INTERNALFORMAT_SUPPORTED 0x826F
#define GL_INTERNALFORMAT_PREFERRED 0x8270
#define GL_INTERNALFORMAT_RED_SIZE 0x8271
#define GL_INTERNALFORMAT_GREEN_SIZE 0x8272
#define GL_INTERNALFORMAT_BLUE_SIZE 0x8273
#define GL_INTERNALFORMAT_ALPHA_SIZE 0x8274
#define GL_INTERNALFORMAT_DEPTH_SIZE 0x8275
#define GL_INTERNALFORMAT_STENCIL_SIZE 0x8276
#define GL_INTERNALFORMAT_SHARED_SIZE 0x8277
#define GL_INTERNALFORMAT_RED_TYPE 0x8278
#define GL_INTERNALFORMAT_GREEN_TYPE 0x8279
#define GL_INTERNALFORMAT_BLUE_TYPE 0x827A
#define GL_INTERNALFORMAT_ALPHA_TYPE 0x827B
#define GL_INTERNALFORMAT_DEPTH_TYPE 0x827C
#define GL_INTERNALFORMAT_STENCIL_TYPE 0x827D
#define GL_MAX_WIDTH 0x827E
#define GL_MAX_HEIGHT 0x827F
#define GL_MAX_DEPTH 0x8280
#define GL_MAX_LAYERS 0x8281
#define GL_MAX_COMBINED_DIMENSIONS 0x8282
#define GL_COLOR_COMPONENTS 0x8283
#define GL_DEPTH_COMPONENTS 0x8284
#define GL_STENCIL_COMPONENTS 0x8285
#define GL_COLOR_RENDERABLE 0x8286
#define GL_DEPTH_RENDERABLE 0x8287
#define GL_STENCIL_RENDERABLE 0x8288
#define GL_FRAMEBUFFER_RENDERABLE 0x8289
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A
#define GL_FRAMEBUFFER_BLEND 0x828B
#define GL_READ_PIXELS 0x828C
#define GL_READ_PIXELS_FORMAT 0x828D
#define GL_READ_PIXELS_TYPE 0x828E
#define GL_TEXTURE_IMAGE_FORMAT 0x828F
#define GL_TEXTURE_IMAGE_TYPE 0x8290
#define GL_GET_TEXTURE_IMAGE_FORMAT 0x8291
#define GL_GET_TEXTURE_IMAGE_TYPE 0x8292
#define GL_MIPMAP 0x8293
#define GL_MANUAL_GENERATE_MIPMAP 0x8294
#define GL_AUTO_GENERATE_MIPMAP 0x8295
#define GL_COLOR_ENCODING 0x8296
#define GL_SRGB_READ 0x8297
#define GL_SRGB_WRITE 0x8298
#define GL_FILTER 0x829A
#define GL_VERTEX_TEXTURE 0x829B
#define GL_TESS_CONTROL_TEXTURE 0x829C
#define GL_TESS_EVALUATION_TEXTURE 0x829D
#define GL_GEOMETRY_TEXTURE 0x829E
#define GL_FRAGMENT_TEXTURE 0x829F
#define GL_COMPUTE_TEXTURE 0x82A0
#define GL_TEXTURE_SHADOW 0x82A1
#define GL_TEXTURE_GATHER 0x82A2
#define GL_TEXTURE_GATHER_SHADOW 0x82A3
#define GL_SHADER_IMAGE_LOAD 0x82A4
#define GL_SHADER_IMAGE_STORE 0x82A5
#define GL_SHADER_IMAGE_ATOMIC 0x82A6
#define GL_IMAGE_TEXEL_SIZE 0x82A7
#define GL_IMAGE_COMPATIBILITY_CLASS 0x82A8
#define GL_IMAGE_PIXEL_FORMAT 0x82A9
#define GL_IMAGE_PIXEL_TYPE 0x82AA
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0x82B3
#define GL_CLEAR_BUFFER 0x82B4
#define GL_TEXTURE_VIEW 0x82B5
#define GL_VIEW_COMPATIBILITY_CLASS 0x82B6
#define GL_FULL_SUPPORT 0x82B7
#define GL_CAVEAT_SUPPORT 0x82B8
#define GL_IMAGE_CLASS_4_X_32 0x82B9
#define GL_IMAGE_CLASS_2_X_32 0x82BA
#define GL_IMAGE_CLASS_1_X_32 0x82BB
#define GL_IMAGE_CLASS_4_X_16 0x82BC
#define GL_IMAGE_CLASS_2_X_16 0x82BD
#define GL_IMAGE_CLASS_1_X_16 0x82BE
#define GL_IMAGE_CLASS_4_X_8 0x82BF
#define GL_IMAGE_CLASS_2_X_8 0x82C0
#define GL_IMAGE_CLASS_1_X_8 0x82C1
#define GL_IMAGE_CLASS_11_11_10 0x82C2
#define GL_IMAGE_CLASS_10_10_10_2 0x82C3
#define GL_VIEW_CLASS_128_BITS 0x82C4
#define GL_VIEW_CLASS_96_BITS 0x82C5
#define GL_VIEW_CLASS_64_BITS 0x82C6
#define GL_VIEW_CLASS_48_BITS 0x82C7
#define GL_VIEW_CLASS_32_BITS 0x82C8
#define GL_VIEW_CLASS_24_BITS 0x82C9
#define GL_VIEW_CLASS_16_BITS 0x82CA
#define GL_VIEW_CLASS_8_BITS 0x82CB
#define GL_VIEW_CLASS_S3TC_DXT1_RGB 0x82CC
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0x82CD
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0x82CE
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0x82CF
#define GL_VIEW_CLASS_RGTC1_RED 0x82D0
#define GL_VIEW_CLASS_RGTC2_RG 0x82D1
#define GL_VIEW_CLASS_BPTC_UNORM 0x82D2
#define GL_VIEW_CLASS_BPTC_FLOAT 0x82D3
#define GL_UNIFORM 0x92E1
#define GL_UNIFORM_BLOCK 0x92E2
#define GL_PROGRAM_INPUT 0x92E3
#define GL_PROGRAM_OUTPUT 0x92E4
#define GL_BUFFER_VARIABLE 0x92E5
#define GL_SHADER_STORAGE_BLOCK 0x92E6
#define GL_VERTEX_SUBROUTINE 0x92E8
#define GL_TESS_CONTROL_SUBROUTINE 0x92E9
#define GL_TESS_EVALUATION_SUBROUTINE 0x92EA
#define GL_GEOMETRY_SUBROUTINE 0x92EB
#define GL_FRAGMENT_SUBROUTINE 0x92EC
#define GL_COMPUTE_SUBROUTINE 0x92ED
#define GL_VERTEX_SUBROUTINE_UNIFORM 0x92EE
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0
#define GL_GEOMETRY_SUBROUTINE_UNIFORM 0x92F1
#define GL_FRAGMENT_SUBROUTINE_UNIFORM 0x92F2
#define GL_COMPUTE_SUBROUTINE_UNIFORM 0x92F3
#define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4
#define GL_ACTIVE_RESOURCES 0x92F5
#define GL_MAX_NAME_LENGTH 0x92F6
#define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8
#define GL_NAME_LENGTH 0x92F9
#define GL_TYPE 0x92FA
#define GL_ARRAY_SIZE 0x92FB
#define GL_OFFSET 0x92FC
#define GL_BLOCK_INDEX 0x92FD
#define GL_ARRAY_STRIDE 0x92FE
#define GL_MATRIX_STRIDE 0x92FF
#define GL_IS_ROW_MAJOR 0x9300
#define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301
#define GL_BUFFER_BINDING 0x9302
#define GL_BUFFER_DATA_SIZE 0x9303
#define GL_NUM_ACTIVE_VARIABLES 0x9304
#define GL_ACTIVE_VARIABLES 0x9305
#define GL_REFERENCED_BY_VERTEX_SHADER 0x9306
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
#define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309
#define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A
#define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B
#define GL_TOP_LEVEL_ARRAY_SIZE 0x930C
#define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D
#define GL_LOCATION 0x930E
#define GL_LOCATION_INDEX 0x930F
#define GL_IS_PER_PATCH 0x92E7
#define GL_SHADER_STORAGE_BUFFER 0x90D2
#define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3
#define GL_SHADER_STORAGE_BUFFER_START 0x90D4
#define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
#define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
#define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA
#define GL_TEXTURE_BUFFER_OFFSET 0x919D
#define GL_TEXTURE_BUFFER_SIZE 0x919E
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
#define GL_TEXTURE_VIEW_MIN_LEVEL 0x82DB
#define GL_TEXTURE_VIEW_NUM_LEVELS 0x82DC
#define GL_TEXTURE_VIEW_MIN_LAYER 0x82DD
#define GL_TEXTURE_VIEW_NUM_LAYERS 0x82DE
#define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF
#define GL_VERTEX_ATTRIB_BINDING 0x82D4
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5
#define GL_VERTEX_BINDING_DIVISOR 0x82D6
#define GL_VERTEX_BINDING_OFFSET 0x82D7
#define GL_VERTEX_BINDING_STRIDE 0x82D8
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
#define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA
#define GL_VERTEX_BINDING_BUFFER 0x8F4F
#define GL_STACK_UNDERFLOW 0x0504
#define GL_STACK_OVERFLOW 0x0503

/* GL_VERSION_4_4 */

#define GL_MAX_VERTEX_ATTRIB_STRIDE 0x82E5
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED 0x8221
#define GL_TEXTURE_BUFFER_BINDING 0x8C2A
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MAP_PERSISTENT_BIT 0x0040
#define GL_MAP_COHERENT_BIT 0x0080
#define GL_DYNAMIC_STORAGE_BIT 0x0100
#define GL_CLIENT_STORAGE_BIT 0x0200
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000
#define GL_BUFFER_IMMUTABLE_STORAGE 0x821F
#define GL_BUFFER_STORAGE_FLAGS 0x8220
#define GL_CLEAR_TEXTURE 0x9365
#define GL_LOCATION_COMPONENT 0x934A
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX 0x934B
#define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C
#define GL_QUERY_BUFFER 0x9192
#define GL_QUERY_BUFFER_BARRIER_BIT 0x00008000
#define GL_QUERY_BUFFER_BINDING 0x9193
#define GL_QUERY_RESULT_NO_WAIT 0x9194
#define GL_MIRROR_CLAMP_TO_EDGE 0x8743
#define GL_STENCIL_INDEX 0x1901
#define GL_STENCIL_INDEX8 0x8D48
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B

/* GL_VERSION_4_5 */

#define GL_CONTEXT_LOST 0x0507
#define GL_LOWER_LEFT 0x8CA1
#define GL_UPPER_LEFT 0x8CA2
#define GL_NEGATIVE_ONE_TO_ONE 0x935E
#define GL_ZERO_TO_ONE 0x935F
#define GL_CLIP_ORIGIN 0x935C
#define GL_CLIP_DEPTH_MODE 0x935D
#define GL_QUERY_WAIT_INVERTED 0x8E17
#define GL_QUERY_NO_WAIT_INVERTED 0x8E18
#define GL_QUERY_BY_REGION_WAIT_INVERTED 0x8E19
#define GL_QUERY_BY_REGION_NO_WAIT_INVERTED 0x8E1A
#define GL_MAX_CULL_DISTANCES 0x82F9
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES 0x82FA
#define GL_TEXTURE_TARGET 0x1006
#define GL_QUERY_TARGET 0x82EA
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_BACK 0x0405
#define GL_NO_ERROR 0
#define GL_GUILTY_CONTEXT_RESET 0x8253
#define GL_INNOCENT_CONTEXT_RESET 0x8254
#define GL_UNKNOWN_CONTEXT_RESET 0x8255
#define GL_RESET_NOTIFICATION_STRATEGY 0x8256
#define GL_LOSE_CONTEXT_ON_RESET 0x8252
#define GL_NO_RESET_NOTIFICATION 0x8261
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT 0x00000004
#define GL_CONTEXT_LOST 0x0507
#define GL_CONTEXT_RELEASE_BEHAVIOR 0x82FB
#define GL_NONE 0
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0x82FC

/* --------------------------------- FUNCTIONS ------------------------------- */

enum {
    EGLAPI_glBlendFunc,
    EGLAPI_glClear,
    EGLAPI_glClearColor,
    EGLAPI_glClearDepth,
    EGLAPI_glClearStencil,
    EGLAPI_glColorMask,
    EGLAPI_glCullFace,
    EGLAPI_glDepthFunc,
    EGLAPI_glDepthMask,
    EGLAPI_glDepthRange,
    EGLAPI_glDisable,
    EGLAPI_glDrawBuffer,
    EGLAPI_glEnable,
    EGLAPI_glFinish,
    EGLAPI_glFlush,
    EGLAPI_glFrontFace,
    EGLAPI_glGetBooleanv,
    EGLAPI_glGetDoublev,
    EGLAPI_glGetError,
    EGLAPI_glGetFloatv,
    EGLAPI_glGetIntegerv,
    EGLAPI_glGetString,
    EGLAPI_glHint,
    EGLAPI_glIsEnabled,
    EGLAPI_glLineWidth,
    EGLAPI_glLogicOp,
    EGLAPI_glPixelStoref,
    EGLAPI_glPixelStorei,
    EGLAPI_glPointSize,
    EGLAPI_glPolygonMode,
    EGLAPI_glReadBuffer,
    EGLAPI_glReadPixels,
    EGLAPI_glScissor,
    EGLAPI_glStencilFunc,
    EGLAPI_glStencilMask,
    EGLAPI_glStencilOp,
    EGLAPI_glViewport,
    EGLAPI_glDeleteTextures,
    EGLAPI_glDrawArrays,
    EGLAPI_glDrawElements,
    EGLAPI_glIsTexture,
    EGLAPI_glPolygonOffset,
    EGLAPI_glDrawRangeElements,
    EGLAPI_glSampleCoverage,
    EGLAPI_glBlendColor,
    EGLAPI_glBlendEquation,
    EGLAPI_glBlendFuncSeparate,
    EGLAPI_glMultiDrawArrays,
    EGLAPI_glMultiDrawElements,
    EGLAPI_glPointParameterf,
    EGLAPI_glPointParameterfv,
    EGLAPI_glPointParameteri,
    EGLAPI_glPointParameteriv,
    EGLAPI_glBeginQuery,
    EGLAPI_glBindBuffer,
    EGLAPI_glBufferData,
    EGLAPI_glDeleteBuffers,
    EGLAPI_glDeleteQueries,
    EGLAPI_glEndQuery,
    EGLAPI_glGenQueries,
    EGLAPI_glGetQueryObjectiv,
    EGLAPI_glGetQueryObjectuiv,
    EGLAPI_glGetQueryiv,
    EGLAPI_glIsBuffer,
    EGLAPI_glIsQuery,
    EGLAPI_glAttachShader,
    EGLAPI_glBindAttribLocation,
    EGLAPI_glBlendEquationSeparate,
    EGLAPI_glCompileShader,
    EGLAPI_glCreateProgram,
    EGLAPI_glCreateShader,
    EGLAPI_glDeleteProgram,
    EGLAPI_glDeleteShader,
    EGLAPI_glDetachShader,
    EGLAPI_glDisableVertexAttribArray,
    EGLAPI_glDrawBuffers,
    EGLAPI_glEnableVertexAttribArray,
    EGLAPI_glGetActiveAttrib,
    EGLAPI_glGetActiveUniform,
    EGLAPI_glGetAttachedShaders,
    EGLAPI_glGetAttribLocation,
    EGLAPI_glGetProgramInfoLog,
    EGLAPI_glGetProgramiv,
    EGLAPI_glGetShaderInfoLog,
    EGLAPI_glGetShaderSource,
    EGLAPI_glGetShaderiv,
    EGLAPI_glGetUniformLocation,
    EGLAPI_glGetUniformfv,
    EGLAPI_glGetUniformiv,
    EGLAPI_glGetVertexAttribPointerv,
    EGLAPI_glGetVertexAttribdv,
    EGLAPI_glGetVertexAttribfv,
    EGLAPI_glGetVertexAttribiv,
    EGLAPI_glIsProgram,
    EGLAPI_glIsShader,
    EGLAPI_glLinkProgram,
    EGLAPI_glShaderSource,
    EGLAPI_glStencilFuncSeparate,
    EGLAPI_glStencilMaskSeparate,
    EGLAPI_glStencilOpSeparate,
    EGLAPI_glUseProgram,
    EGLAPI_glValidateProgram,
    EGLAPI_glBeginConditionalRender,
    EGLAPI_glBeginTransformFeedback,
    EGLAPI_glBindBufferBase,
    EGLAPI_glBindBufferRange,
    EGLAPI_glBindFragDataLocation,
    EGLAPI_glBindFramebuffer,
    EGLAPI_glBindRenderbuffer,
    EGLAPI_glBindVertexArray,
    EGLAPI_glBlitFramebuffer,
    EGLAPI_glCheckFramebufferStatus,
    EGLAPI_glClampColor,
    EGLAPI_glClearBufferfi,
    EGLAPI_glClearBufferfv,
    EGLAPI_glClearBufferiv,
    EGLAPI_glClearBufferuiv,
    EGLAPI_glColorMaski,
    EGLAPI_glDeleteFramebuffers,
    EGLAPI_glDeleteRenderbuffers,
    EGLAPI_glDeleteVertexArrays,
    EGLAPI_glDisablei,
    EGLAPI_glEnablei,
    EGLAPI_glEndConditionalRender,
    EGLAPI_glEndTransformFeedback,
    EGLAPI_glFlushMappedBufferRange,
    EGLAPI_glFramebufferRenderbuffer,
    EGLAPI_glFramebufferTexture1D,
    EGLAPI_glFramebufferTexture2D,
    EGLAPI_glFramebufferTexture3D,
    EGLAPI_glFramebufferTextureLayer,
    EGLAPI_glGenFramebuffers,
    EGLAPI_glGenRenderbuffers,
    EGLAPI_glGenVertexArrays,
    EGLAPI_glGenerateMipmap,
    EGLAPI_glGetBooleani_v,
    EGLAPI_glGetFragDataLocation,
    EGLAPI_glGetFramebufferAttachmentParameteriv,
    EGLAPI_glGetIntegeri_v,
    EGLAPI_glGetRenderbufferParameteriv,
    EGLAPI_glGetStringi,
    EGLAPI_glGetTexParameterIiv,
    EGLAPI_glGetTexParameterIuiv,
    EGLAPI_glGetTransformFeedbackVarying,
    EGLAPI_glGetUniformuiv,
    EGLAPI_glGetVertexAttribIiv,
    EGLAPI_glGetVertexAttribIuiv,
    EGLAPI_glIsEnabledi,
    EGLAPI_glIsFramebuffer,
    EGLAPI_glIsRenderbuffer,
    EGLAPI_glIsVertexArray,
    EGLAPI_glMapBufferRange,
    EGLAPI_glRenderbufferStorage,
    EGLAPI_glRenderbufferStorageMultisample,
    EGLAPI_glTexParameterIiv,
    EGLAPI_glTexParameterIuiv,
    EGLAPI_glTransformFeedbackVaryings,
    EGLAPI_glCopyBufferSubData,
    EGLAPI_glDrawArraysInstanced,
    EGLAPI_glDrawElementsInstanced,
    EGLAPI_glGetActiveUniformBlockName,
    EGLAPI_glGetActiveUniformBlockiv,
    EGLAPI_glGetActiveUniformName,
    EGLAPI_glGetActiveUniformsiv,
    EGLAPI_glGetUniformBlockIndex,
    EGLAPI_glGetUniformIndices,
    EGLAPI_glPrimitiveRestartIndex,
    EGLAPI_glUniformBlockBinding,
    EGLAPI_glClientWaitSync,
    EGLAPI_glDeleteSync,
    EGLAPI_glDrawElementsBaseVertex,
    EGLAPI_glDrawElementsInstancedBaseVertex,
    EGLAPI_glDrawRangeElementsBaseVertex,
    EGLAPI_glFenceSync,
    EGLAPI_glFramebufferTexture,
    EGLAPI_glGetBufferParameteri64v,
    EGLAPI_glGetInteger64i_v,
    EGLAPI_glGetInteger64v,
    EGLAPI_glGetMultisamplefv,
    EGLAPI_glGetSynciv,
    EGLAPI_glIsSync,
    EGLAPI_glMultiDrawElementsBaseVertex,
    EGLAPI_glProvokingVertex,
    EGLAPI_glSampleMaski,
    EGLAPI_glWaitSync,
    EGLAPI_glBindFragDataLocationIndexed,
    EGLAPI_glBindSampler,
    EGLAPI_glDeleteSamplers,
    EGLAPI_glGetFragDataIndex,
    EGLAPI_glGetQueryObjecti64v,
    EGLAPI_glGetQueryObjectui64v,
    EGLAPI_glGetSamplerParameterIiv,
    EGLAPI_glGetSamplerParameterIuiv,
    EGLAPI_glGetSamplerParameterfv,
    EGLAPI_glGetSamplerParameteriv,
    EGLAPI_glIsSampler,
    EGLAPI_glQueryCounter,
    EGLAPI_glSamplerParameterIiv,
    EGLAPI_glSamplerParameterIuiv,
    EGLAPI_glSamplerParameterf,
    EGLAPI_glSamplerParameterfv,
    EGLAPI_glSamplerParameteri,
    EGLAPI_glSamplerParameteriv,
    EGLAPI_glBeginQueryIndexed,
    EGLAPI_glBindTransformFeedback,
    EGLAPI_glBlendEquationSeparatei,
    EGLAPI_glBlendEquationi,
    EGLAPI_glBlendFuncSeparatei,
    EGLAPI_glBlendFunci,
    EGLAPI_glDeleteTransformFeedbacks,
    EGLAPI_glDrawArraysIndirect,
    EGLAPI_glDrawElementsIndirect,
    EGLAPI_glDrawTransformFeedback,
    EGLAPI_glDrawTransformFeedbackStream,
    EGLAPI_glEndQueryIndexed,
    EGLAPI_glGenTransformFeedbacks,
    EGLAPI_glGetActiveSubroutineName,
    EGLAPI_glGetActiveSubroutineUniformName,
    EGLAPI_glGetActiveSubroutineUniformiv,
    EGLAPI_glGetProgramStageiv,
    EGLAPI_glGetQueryIndexediv,
    EGLAPI_glGetSubroutineIndex,
    EGLAPI_glGetSubroutineUniformLocation,
    EGLAPI_glGetUniformSubroutineuiv,
    EGLAPI_glGetUniformdv,
    EGLAPI_glIsTransformFeedback,
    EGLAPI_glMinSampleShading,
    EGLAPI_glPatchParameterfv,
    EGLAPI_glPatchParameteri,
    EGLAPI_glPauseTransformFeedback,
    EGLAPI_glResumeTransformFeedback,
    EGLAPI_glUniformSubroutinesuiv,
    EGLAPI_glActiveShaderProgram,
    EGLAPI_glBindProgramPipeline,
    EGLAPI_glClearDepthf,
    EGLAPI_glCreateShaderProgramv,
    EGLAPI_glDeleteProgramPipelines,
    EGLAPI_glDepthRangeArrayv,
    EGLAPI_glDepthRangeIndexed,
    EGLAPI_glDepthRangef,
    EGLAPI_glGenProgramPipelines,
    EGLAPI_glGetDoublei_v,
    EGLAPI_glGetFloati_v,
    EGLAPI_glGetProgramBinary,
    EGLAPI_glGetProgramPipelineInfoLog,
    EGLAPI_glGetProgramPipelineiv,
    EGLAPI_glGetShaderPrecisionFormat,
    EGLAPI_glGetVertexAttribLdv,
    EGLAPI_glIsProgramPipeline,
    EGLAPI_glProgramBinary,
    EGLAPI_glProgramParameteri,
    EGLAPI_glProgramUniform1d,
    EGLAPI_glProgramUniform1dv,
    EGLAPI_glProgramUniform1f,
    EGLAPI_glProgramUniform1fv,
    EGLAPI_glProgramUniform1i,
    EGLAPI_glProgramUniform1iv,
    EGLAPI_glProgramUniform1ui,
    EGLAPI_glProgramUniform1uiv,
    EGLAPI_glProgramUniform2d,
    EGLAPI_glProgramUniform2dv,
    EGLAPI_glProgramUniform2f,
    EGLAPI_glProgramUniform2fv,
    EGLAPI_glProgramUniform2i,
    EGLAPI_glProgramUniform2iv,
    EGLAPI_glProgramUniform2ui,
    EGLAPI_glProgramUniform2uiv,
    EGLAPI_glProgramUniform3d,
    EGLAPI_glProgramUniform3dv,
    EGLAPI_glProgramUniform3f,
    EGLAPI_glProgramUniform3fv,
    EGLAPI_glProgramUniform3i,
    EGLAPI_glProgramUniform3iv,
    EGLAPI_glProgramUniform3ui,
    EGLAPI_glProgramUniform3uiv,
    EGLAPI_glProgramUniform4d,
    EGLAPI_glProgramUniform4dv,
    EGLAPI_glProgramUniform4f,
    EGLAPI_glProgramUniform4fv,
    EGLAPI_glProgramUniform4i,
    EGLAPI_glProgramUniform4iv,
    EGLAPI_glProgramUniform4ui,
    EGLAPI_glProgramUniform4uiv,
    EGLAPI_glProgramUniformMatrix2dv,
    EGLAPI_glProgramUniformMatrix2fv,
    EGLAPI_glProgramUniformMatrix2x3dv,
    EGLAPI_glProgramUniformMatrix2x3fv,
    EGLAPI_glProgramUniformMatrix2x4dv,
    EGLAPI_glProgramUniformMatrix2x4fv,
    EGLAPI_glProgramUniformMatrix3dv,
    EGLAPI_glProgramUniformMatrix3fv,
    EGLAPI_glProgramUniformMatrix3x2dv,
    EGLAPI_glProgramUniformMatrix3x2fv,
    EGLAPI_glProgramUniformMatrix3x4dv,
    EGLAPI_glProgramUniformMatrix3x4fv,
    EGLAPI_glProgramUniformMatrix4dv,
    EGLAPI_glProgramUniformMatrix4fv,
    EGLAPI_glProgramUniformMatrix4x2dv,
    EGLAPI_glProgramUniformMatrix4x2fv,
    EGLAPI_glProgramUniformMatrix4x3dv,
    EGLAPI_glProgramUniformMatrix4x3fv,
    EGLAPI_glReleaseShaderCompiler,
    EGLAPI_glScissorArrayv,
    EGLAPI_glScissorIndexed,
    EGLAPI_glScissorIndexedv,
    EGLAPI_glShaderBinary,
    EGLAPI_glUseProgramStages,
    EGLAPI_glValidateProgramPipeline,
    EGLAPI_glViewportArrayv,
    EGLAPI_glViewportIndexedf,
    EGLAPI_glViewportIndexedfv,
    EGLAPI_glBindImageTexture,
    EGLAPI_glDrawArraysInstancedBaseInstance,
    EGLAPI_glDrawElementsInstancedBaseInstance,
    EGLAPI_glDrawElementsInstancedBaseVertexBaseInstance,
    EGLAPI_glDrawTransformFeedbackInstanced,
    EGLAPI_glDrawTransformFeedbackStreamInstanced,
    EGLAPI_glGetActiveAtomicCounterBufferiv,
    EGLAPI_glGetInternalformativ,
    EGLAPI_glMemoryBarrier,
    EGLAPI_glBindVertexBuffer,
    EGLAPI_glClearBufferData,
    EGLAPI_glClearBufferSubData,
    EGLAPI_glCopyImageSubData,
    EGLAPI_glDebugMessageCallback,
    EGLAPI_glDebugMessageControl,
    EGLAPI_glDebugMessageInsert,
    EGLAPI_glDispatchCompute,
    EGLAPI_glDispatchComputeIndirect,
    EGLAPI_glFramebufferParameteri,
    EGLAPI_glGetDebugMessageLog,
    EGLAPI_glGetFramebufferParameteriv,
    EGLAPI_glGetInternalformati64v,
    EGLAPI_glGetObjectLabel,
    EGLAPI_glGetObjectPtrLabel,
    EGLAPI_glGetPointerv,
    EGLAPI_glGetProgramInterfaceiv,
    EGLAPI_glGetProgramResourceIndex,
    EGLAPI_glGetProgramResourceLocation,
    EGLAPI_glGetProgramResourceLocationIndex,
    EGLAPI_glGetProgramResourceName,
    EGLAPI_glGetProgramResourceiv,
    EGLAPI_glInvalidateBufferData,
    EGLAPI_glInvalidateBufferSubData,
    EGLAPI_glInvalidateFramebuffer,
    EGLAPI_glInvalidateSubFramebuffer,
    EGLAPI_glInvalidateTexImage,
    EGLAPI_glInvalidateTexSubImage,
    EGLAPI_glMultiDrawArraysIndirect,
    EGLAPI_glMultiDrawElementsIndirect,
    EGLAPI_glObjectLabel,
    EGLAPI_glObjectPtrLabel,
    EGLAPI_glPopDebugGroup,
    EGLAPI_glPushDebugGroup,
    EGLAPI_glShaderStorageBlockBinding,
    EGLAPI_glTextureView,
    EGLAPI_glVertexAttribBinding,
    EGLAPI_glVertexAttribFormat,
    EGLAPI_glVertexAttribIFormat,
    EGLAPI_glVertexAttribLFormat,
    EGLAPI_glVertexBindingDivisor,
    EGLAPI_glBindBuffersBase,
    EGLAPI_glBindBuffersRange,
    EGLAPI_glBindImageTextures,
    EGLAPI_glBindSamplers,
    EGLAPI_glBindTextures,
    EGLAPI_glBindVertexBuffers,
    EGLAPI_glBufferStorage,
    EGLAPI_glClearTexImage,
    EGLAPI_glClearTexSubImage,
    EGLAPI_glBindTextureUnit,
    EGLAPI_glBlitNamedFramebuffer,
    EGLAPI_glCheckNamedFramebufferStatus,
    EGLAPI_glClearNamedBufferData,
    EGLAPI_glClearNamedBufferSubData,
    EGLAPI_glClearNamedFramebufferfi,
    EGLAPI_glClearNamedFramebufferfv,
    EGLAPI_glClearNamedFramebufferiv,
    EGLAPI_glClearNamedFramebufferuiv,
    EGLAPI_glClipControl,
    EGLAPI_glCompressedTextureSubImage1D,
    EGLAPI_glCompressedTextureSubImage2D,
    EGLAPI_glCompressedTextureSubImage3D,
    EGLAPI_glCopyNamedBufferSubData,
    EGLAPI_glCopyTextureSubImage1D,
    EGLAPI_glCopyTextureSubImage2D,
    EGLAPI_glCopyTextureSubImage3D,
    EGLAPI_glCreateBuffers,
    EGLAPI_glCreateFramebuffers,
    EGLAPI_glCreateProgramPipelines,
    EGLAPI_glCreateQueries,
    EGLAPI_glCreateRenderbuffers,
    EGLAPI_glCreateSamplers,
    EGLAPI_glCreateTextures,
    EGLAPI_glCreateTransformFeedbacks,
    EGLAPI_glCreateVertexArrays,
    EGLAPI_glDisableVertexArrayAttrib,
    EGLAPI_glEnableVertexArrayAttrib,
    EGLAPI_glFlushMappedNamedBufferRange,
    EGLAPI_glGenerateTextureMipmap,
    EGLAPI_glGetCompressedTextureImage,
    EGLAPI_glGetCompressedTextureSubImage,
    EGLAPI_glGetGraphicsResetStatus,
    EGLAPI_glGetNamedBufferParameteri64v,
    EGLAPI_glGetNamedBufferParameteriv,
    EGLAPI_glGetNamedBufferPointerv,
    EGLAPI_glGetNamedBufferSubData,
    EGLAPI_glGetNamedFramebufferAttachmentParameteriv,
    EGLAPI_glGetNamedFramebufferParameteriv,
    EGLAPI_glGetNamedRenderbufferParameteriv,
    EGLAPI_glGetQueryBufferObjecti64v,
    EGLAPI_glGetQueryBufferObjectiv,
    EGLAPI_glGetQueryBufferObjectui64v,
    EGLAPI_glGetQueryBufferObjectuiv,
    EGLAPI_glGetTextureImage,
    EGLAPI_glGetTextureLevelParameterfv,
    EGLAPI_glGetTextureLevelParameteriv,
    EGLAPI_glGetTextureParameterIiv,
    EGLAPI_glGetTextureParameterIuiv,
    EGLAPI_glGetTextureParameterfv,
    EGLAPI_glGetTextureParameteriv,
    EGLAPI_glGetTextureSubImage,
    EGLAPI_glGetTransformFeedbacki64_v,
    EGLAPI_glGetTransformFeedbacki_v,
    EGLAPI_glGetTransformFeedbackiv,
    EGLAPI_glGetVertexArrayIndexed64iv,
    EGLAPI_glGetVertexArrayIndexediv,
    EGLAPI_glGetVertexArrayiv,
    EGLAPI_glGetnCompressedTexImage,
    EGLAPI_glGetnTexImage,
    EGLAPI_glGetnUniformdv,
    EGLAPI_glGetnUniformfv,
    EGLAPI_glGetnUniformiv,
    EGLAPI_glGetnUniformuiv,
    EGLAPI_glInvalidateNamedFramebufferData,
    EGLAPI_glInvalidateNamedFramebufferSubData,
    EGLAPI_glMapNamedBuffer,
    EGLAPI_glMapNamedBufferRange,
    EGLAPI_glMemoryBarrierByRegion,
    EGLAPI_glNamedBufferData,
    EGLAPI_glNamedBufferStorage,
    EGLAPI_glNamedBufferSubData,
    EGLAPI_glNamedFramebufferDrawBuffer,
    EGLAPI_glNamedFramebufferDrawBuffers,
    EGLAPI_glNamedFramebufferParameteri,
    EGLAPI_glNamedFramebufferReadBuffer,
    EGLAPI_glNamedFramebufferRenderbuffer,
    EGLAPI_glNamedFramebufferTexture,
    EGLAPI_glNamedFramebufferTextureLayer,
    EGLAPI_glNamedRenderbufferStorage,
    EGLAPI_glNamedRenderbufferStorageMultisample,
    EGLAPI_glReadnPixels,
    EGLAPI_glTextureBarrier,
    EGLAPI_glTextureBuffer,
    EGLAPI_glTextureBufferRange,
    EGLAPI_glTextureParameterIiv,
    EGLAPI_glTextureParameterIuiv,
    EGLAPI_glTextureParameterf,
    EGLAPI_glTextureParameterfv,
    EGLAPI_glTextureParameteri,
    EGLAPI_glTextureParameteriv,
    EGLAPI_glTextureStorage1D,
    EGLAPI_glTextureStorage2D,
    EGLAPI_glTextureStorage2DMultisample,
    EGLAPI_glTextureStorage3D,
    EGLAPI_glTextureStorage3DMultisample,
    EGLAPI_glTextureSubImage1D,
    EGLAPI_glTextureSubImage2D,
    EGLAPI_glTextureSubImage3D,
    EGLAPI_glTransformFeedbackBufferBase,
    EGLAPI_glTransformFeedbackBufferRange,
    EGLAPI_glUnmapNamedBuffer,
    EGLAPI_glVertexArrayAttribBinding,
    EGLAPI_glVertexArrayAttribFormat,
    EGLAPI_glVertexArrayAttribIFormat,
    EGLAPI_glVertexArrayAttribLFormat,
    EGLAPI_glVertexArrayBindingDivisor,
    EGLAPI_glVertexArrayElementBuffer,
    EGLAPI_glVertexArrayVertexBuffer,
    EGLAPI_glVertexArrayVertexBuffers,
    EGLAPI_COUNT
};

typedef union {char* n; PGLAPI_PROC f;} GLAPI[EGLAPI_COUNT];
extern GLAPI glapi;


#define GL_VERSION_1_0

typedef void (GLAPICALL * PGLAPIBLENDFUNC_PROC)(GLenum sfactor, GLenum dfactor);
typedef void (GLAPICALL * PGLAPICLEAR_PROC)(GLbitfield mask);
typedef void (GLAPICALL * PGLAPICLEARCOLOR_PROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAPICALL * PGLAPICLEARDEPTH_PROC)(GLdouble depth);
typedef void (GLAPICALL * PGLAPICLEARSTENCIL_PROC)(GLint s);
typedef void (GLAPICALL * PGLAPICOLORMASK_PROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
typedef void (GLAPICALL * PGLAPICULLFACE_PROC)(GLenum mode);
typedef void (GLAPICALL * PGLAPIDEPTHFUNC_PROC)(GLenum func);
typedef void (GLAPICALL * PGLAPIDEPTHMASK_PROC)(GLboolean flag);
typedef void (GLAPICALL * PGLAPIDEPTHRANGE_PROC)(GLdouble near, GLdouble far);
typedef void (GLAPICALL * PGLAPIDISABLE_PROC)(GLenum cap);
typedef void (GLAPICALL * PGLAPIDRAWBUFFER_PROC)(GLenum buf);
typedef void (GLAPICALL * PGLAPIENABLE_PROC)(GLenum cap);
typedef void (GLAPICALL * PGLAPIFINISH_PROC)(void);
typedef void (GLAPICALL * PGLAPIFLUSH_PROC)(void);
typedef void (GLAPICALL * PGLAPIFRONTFACE_PROC)(GLenum mode);
typedef void (GLAPICALL * PGLAPIGETBOOLEANV_PROC)(GLenum pname, GLboolean * data);
typedef void (GLAPICALL * PGLAPIGETDOUBLEV_PROC)(GLenum pname, GLdouble * data);
typedef GLenum (GLAPICALL * PGLAPIGETERROR_PROC)(void);
typedef void (GLAPICALL * PGLAPIGETFLOATV_PROC)(GLenum pname, GLfloat * data);
typedef void (GLAPICALL * PGLAPIGETINTEGERV_PROC)(GLenum pname, GLint * data);
typedef const GLubyte * (GLAPICALL * PGLAPIGETSTRING_PROC)(GLenum name);
typedef void (GLAPICALL * PGLAPIHINT_PROC)(GLenum target, GLenum mode);
typedef GLboolean (GLAPICALL * PGLAPIISENABLED_PROC)(GLenum cap);
typedef void (GLAPICALL * PGLAPILINEWIDTH_PROC)(GLfloat width);
typedef void (GLAPICALL * PGLAPILOGICOP_PROC)(GLenum opcode);
typedef void (GLAPICALL * PGLAPIPIXELSTOREF_PROC)(GLenum pname, GLfloat param);
typedef void (GLAPICALL * PGLAPIPIXELSTOREI_PROC)(GLenum pname, GLint param);
typedef void (GLAPICALL * PGLAPIPOINTSIZE_PROC)(GLfloat size);
typedef void (GLAPICALL * PGLAPIPOLYGONMODE_PROC)(GLenum face, GLenum mode);
typedef void (GLAPICALL * PGLAPIREADBUFFER_PROC)(GLenum src);
typedef void (GLAPICALL * PGLAPIREADPIXELS_PROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels);
typedef void (GLAPICALL * PGLAPISCISSOR_PROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAPICALL * PGLAPISTENCILFUNC_PROC)(GLenum func, GLint ref, GLuint mask);
typedef void (GLAPICALL * PGLAPISTENCILMASK_PROC)(GLuint mask);
typedef void (GLAPICALL * PGLAPISTENCILOP_PROC)(GLenum fail, GLenum zfail, GLenum zpass);
typedef void (GLAPICALL * PGLAPIVIEWPORT_PROC)(GLint x, GLint y, GLsizei width, GLsizei height);

#define glBlendFunc ((PGLAPIBLENDFUNC_PROC)glapi[EGLAPI_glBlendFunc].f)
#define glClear ((PGLAPICLEAR_PROC)glapi[EGLAPI_glClear].f)
#define glClearColor ((PGLAPICLEARCOLOR_PROC)glapi[EGLAPI_glClearColor].f)
#define glClearDepth ((PGLAPICLEARDEPTH_PROC)glapi[EGLAPI_glClearDepth].f)
#define glClearStencil ((PGLAPICLEARSTENCIL_PROC)glapi[EGLAPI_glClearStencil].f)
#define glColorMask ((PGLAPICOLORMASK_PROC)glapi[EGLAPI_glColorMask].f)
#define glCullFace ((PGLAPICULLFACE_PROC)glapi[EGLAPI_glCullFace].f)
#define glDepthFunc ((PGLAPIDEPTHFUNC_PROC)glapi[EGLAPI_glDepthFunc].f)
#define glDepthMask ((PGLAPIDEPTHMASK_PROC)glapi[EGLAPI_glDepthMask].f)
#define glDepthRange ((PGLAPIDEPTHRANGE_PROC)glapi[EGLAPI_glDepthRange].f)
#define glDisable ((PGLAPIDISABLE_PROC)glapi[EGLAPI_glDisable].f)
#define glDrawBuffer ((PGLAPIDRAWBUFFER_PROC)glapi[EGLAPI_glDrawBuffer].f)
#define glEnable ((PGLAPIENABLE_PROC)glapi[EGLAPI_glEnable].f)
#define glFinish ((PGLAPIFINISH_PROC)glapi[EGLAPI_glFinish].f)
#define glFlush ((PGLAPIFLUSH_PROC)glapi[EGLAPI_glFlush].f)
#define glFrontFace ((PGLAPIFRONTFACE_PROC)glapi[EGLAPI_glFrontFace].f)
#define glGetBooleanv ((PGLAPIGETBOOLEANV_PROC)glapi[EGLAPI_glGetBooleanv].f)
#define glGetDoublev ((PGLAPIGETDOUBLEV_PROC)glapi[EGLAPI_glGetDoublev].f)
#define glGetError ((PGLAPIGETERROR_PROC)glapi[EGLAPI_glGetError].f)
#define glGetFloatv ((PGLAPIGETFLOATV_PROC)glapi[EGLAPI_glGetFloatv].f)
#define glGetIntegerv ((PGLAPIGETINTEGERV_PROC)glapi[EGLAPI_glGetIntegerv].f)
#define glGetString ((PGLAPIGETSTRING_PROC)glapi[EGLAPI_glGetString].f)
#define glHint ((PGLAPIHINT_PROC)glapi[EGLAPI_glHint].f)
#define glIsEnabled ((PGLAPIISENABLED_PROC)glapi[EGLAPI_glIsEnabled].f)
#define glLineWidth ((PGLAPILINEWIDTH_PROC)glapi[EGLAPI_glLineWidth].f)
#define glLogicOp ((PGLAPILOGICOP_PROC)glapi[EGLAPI_glLogicOp].f)
#define glPixelStoref ((PGLAPIPIXELSTOREF_PROC)glapi[EGLAPI_glPixelStoref].f)
#define glPixelStorei ((PGLAPIPIXELSTOREI_PROC)glapi[EGLAPI_glPixelStorei].f)
#define glPointSize ((PGLAPIPOINTSIZE_PROC)glapi[EGLAPI_glPointSize].f)
#define glPolygonMode ((PGLAPIPOLYGONMODE_PROC)glapi[EGLAPI_glPolygonMode].f)
#define glReadBuffer ((PGLAPIREADBUFFER_PROC)glapi[EGLAPI_glReadBuffer].f)
#define glReadPixels ((PGLAPIREADPIXELS_PROC)glapi[EGLAPI_glReadPixels].f)
#define glScissor ((PGLAPISCISSOR_PROC)glapi[EGLAPI_glScissor].f)
#define glStencilFunc ((PGLAPISTENCILFUNC_PROC)glapi[EGLAPI_glStencilFunc].f)
#define glStencilMask ((PGLAPISTENCILMASK_PROC)glapi[EGLAPI_glStencilMask].f)
#define glStencilOp ((PGLAPISTENCILOP_PROC)glapi[EGLAPI_glStencilOp].f)
#define glViewport ((PGLAPIVIEWPORT_PROC)glapi[EGLAPI_glViewport].f)

#define GL_VERSION_1_1

typedef void (GLAPICALL * PGLAPIDELETETEXTURES_PROC)(GLsizei n, const GLuint * textures);
typedef void (GLAPICALL * PGLAPIDRAWARRAYS_PROC)(GLenum mode, GLint first, GLsizei count);
typedef void (GLAPICALL * PGLAPIDRAWELEMENTS_PROC)(GLenum mode, GLsizei count, GLenum type, const void * indices);
typedef GLboolean (GLAPICALL * PGLAPIISTEXTURE_PROC)(GLuint texture);
typedef void (GLAPICALL * PGLAPIPOLYGONOFFSET_PROC)(GLfloat factor, GLfloat units);

#define glDeleteTextures ((PGLAPIDELETETEXTURES_PROC)glapi[EGLAPI_glDeleteTextures].f)
#define glDrawArrays ((PGLAPIDRAWARRAYS_PROC)glapi[EGLAPI_glDrawArrays].f)
#define glDrawElements ((PGLAPIDRAWELEMENTS_PROC)glapi[EGLAPI_glDrawElements].f)
#define glIsTexture ((PGLAPIISTEXTURE_PROC)glapi[EGLAPI_glIsTexture].f)
#define glPolygonOffset ((PGLAPIPOLYGONOFFSET_PROC)glapi[EGLAPI_glPolygonOffset].f)

#define GL_VERSION_1_2

typedef void (GLAPICALL * PGLAPIDRAWRANGEELEMENTS_PROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices);

#define glDrawRangeElements ((PGLAPIDRAWRANGEELEMENTS_PROC)glapi[EGLAPI_glDrawRangeElements].f)

#define GL_VERSION_1_3

typedef void (GLAPICALL * PGLAPISAMPLECOVERAGE_PROC)(GLfloat value, GLboolean invert);

#define glSampleCoverage ((PGLAPISAMPLECOVERAGE_PROC)glapi[EGLAPI_glSampleCoverage].f)

#define GL_VERSION_1_4

typedef void (GLAPICALL * PGLAPIBLENDCOLOR_PROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAPICALL * PGLAPIBLENDEQUATION_PROC)(GLenum mode);
typedef void (GLAPICALL * PGLAPIBLENDFUNCSEPARATE_PROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
typedef void (GLAPICALL * PGLAPIMULTIDRAWARRAYS_PROC)(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount);
typedef void (GLAPICALL * PGLAPIMULTIDRAWELEMENTS_PROC)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount);
typedef void (GLAPICALL * PGLAPIPOINTPARAMETERF_PROC)(GLenum pname, GLfloat param);
typedef void (GLAPICALL * PGLAPIPOINTPARAMETERFV_PROC)(GLenum pname, const GLfloat * params);
typedef void (GLAPICALL * PGLAPIPOINTPARAMETERI_PROC)(GLenum pname, GLint param);
typedef void (GLAPICALL * PGLAPIPOINTPARAMETERIV_PROC)(GLenum pname, const GLint * params);

#define glBlendColor ((PGLAPIBLENDCOLOR_PROC)glapi[EGLAPI_glBlendColor].f)
#define glBlendEquation ((PGLAPIBLENDEQUATION_PROC)glapi[EGLAPI_glBlendEquation].f)
#define glBlendFuncSeparate ((PGLAPIBLENDFUNCSEPARATE_PROC)glapi[EGLAPI_glBlendFuncSeparate].f)
#define glMultiDrawArrays ((PGLAPIMULTIDRAWARRAYS_PROC)glapi[EGLAPI_glMultiDrawArrays].f)
#define glMultiDrawElements ((PGLAPIMULTIDRAWELEMENTS_PROC)glapi[EGLAPI_glMultiDrawElements].f)
#define glPointParameterf ((PGLAPIPOINTPARAMETERF_PROC)glapi[EGLAPI_glPointParameterf].f)
#define glPointParameterfv ((PGLAPIPOINTPARAMETERFV_PROC)glapi[EGLAPI_glPointParameterfv].f)
#define glPointParameteri ((PGLAPIPOINTPARAMETERI_PROC)glapi[EGLAPI_glPointParameteri].f)
#define glPointParameteriv ((PGLAPIPOINTPARAMETERIV_PROC)glapi[EGLAPI_glPointParameteriv].f)

#define GL_VERSION_1_5

typedef void (GLAPICALL * PGLAPIBEGINQUERY_PROC)(GLenum target, GLuint id);
typedef void (GLAPICALL * PGLAPIBINDBUFFER_PROC)(GLenum target, GLuint buffer);
typedef void (GLAPICALL * PGLAPIBUFFERDATA_PROC)(GLenum target, GLsizeiptr size, const void * data, GLenum usage);
typedef void (GLAPICALL * PGLAPIDELETEBUFFERS_PROC)(GLsizei n, const GLuint * buffers);
typedef void (GLAPICALL * PGLAPIDELETEQUERIES_PROC)(GLsizei n, const GLuint * ids);
typedef void (GLAPICALL * PGLAPIENDQUERY_PROC)(GLenum target);
typedef void (GLAPICALL * PGLAPIGENQUERIES_PROC)(GLsizei n, GLuint * ids);
typedef void (GLAPICALL * PGLAPIGETQUERYOBJECTIV_PROC)(GLuint id, GLenum pname, GLint * params);
typedef void (GLAPICALL * PGLAPIGETQUERYOBJECTUIV_PROC)(GLuint id, GLenum pname, GLuint * params);
typedef void (GLAPICALL * PGLAPIGETQUERYIV_PROC)(GLenum target, GLenum pname, GLint * params);
typedef GLboolean (GLAPICALL * PGLAPIISBUFFER_PROC)(GLuint buffer);
typedef GLboolean (GLAPICALL * PGLAPIISQUERY_PROC)(GLuint id);

#define glBeginQuery ((PGLAPIBEGINQUERY_PROC)glapi[EGLAPI_glBeginQuery].f)
#define glBindBuffer ((PGLAPIBINDBUFFER_PROC)glapi[EGLAPI_glBindBuffer].f)
#define glBufferData ((PGLAPIBUFFERDATA_PROC)glapi[EGLAPI_glBufferData].f)
#define glDeleteBuffers ((PGLAPIDELETEBUFFERS_PROC)glapi[EGLAPI_glDeleteBuffers].f)
#define glDeleteQueries ((PGLAPIDELETEQUERIES_PROC)glapi[EGLAPI_glDeleteQueries].f)
#define glEndQuery ((PGLAPIENDQUERY_PROC)glapi[EGLAPI_glEndQuery].f)
#define glGenQueries ((PGLAPIGENQUERIES_PROC)glapi[EGLAPI_glGenQueries].f)
#define glGetQueryObjectiv ((PGLAPIGETQUERYOBJECTIV_PROC)glapi[EGLAPI_glGetQueryObjectiv].f)
#define glGetQueryObjectuiv ((PGLAPIGETQUERYOBJECTUIV_PROC)glapi[EGLAPI_glGetQueryObjectuiv].f)
#define glGetQueryiv ((PGLAPIGETQUERYIV_PROC)glapi[EGLAPI_glGetQueryiv].f)
#define glIsBuffer ((PGLAPIISBUFFER_PROC)glapi[EGLAPI_glIsBuffer].f)
#define glIsQuery ((PGLAPIISQUERY_PROC)glapi[EGLAPI_glIsQuery].f)

#define GL_VERSION_2_0

typedef void (GLAPICALL * PGLAPIATTACHSHADER_PROC)(GLuint program, GLuint shader);
typedef void (GLAPICALL * PGLAPIBINDATTRIBLOCATION_PROC)(GLuint program, GLuint index, const GLchar * name);
typedef void (GLAPICALL * PGLAPIBLENDEQUATIONSEPARATE_PROC)(GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAPICALL * PGLAPICOMPILESHADER_PROC)(GLuint shader);
typedef GLuint (GLAPICALL * PGLAPICREATEPROGRAM_PROC)(void);
typedef GLuint (GLAPICALL * PGLAPICREATESHADER_PROC)(GLenum type);
typedef void (GLAPICALL * PGLAPIDELETEPROGRAM_PROC)(GLuint program);
typedef void (GLAPICALL * PGLAPIDELETESHADER_PROC)(GLuint shader);
typedef void (GLAPICALL * PGLAPIDETACHSHADER_PROC)(GLuint program, GLuint shader);
typedef void (GLAPICALL * PGLAPIDISABLEVERTEXATTRIBARRAY_PROC)(GLuint index);
typedef void (GLAPICALL * PGLAPIDRAWBUFFERS_PROC)(GLsizei n, const GLenum * bufs);
typedef void (GLAPICALL * PGLAPIENABLEVERTEXATTRIBARRAY_PROC)(GLuint index);
typedef void (GLAPICALL * PGLAPIGETACTIVEATTRIB_PROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
typedef void (GLAPICALL * PGLAPIGETACTIVEUNIFORM_PROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
typedef void (GLAPICALL * PGLAPIGETATTACHEDSHADERS_PROC)(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders);
typedef GLint (GLAPICALL * PGLAPIGETATTRIBLOCATION_PROC)(GLuint program, const GLchar * name);
typedef void (GLAPICALL * PGLAPIGETPROGRAMINFOLOG_PROC)(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (GLAPICALL * PGLAPIGETPROGRAMIV_PROC)(GLuint program, GLenum pname, GLint * params);
typedef void (GLAPICALL * PGLAPIGETSHADERINFOLOG_PROC)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (GLAPICALL * PGLAPIGETSHADERSOURCE_PROC)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source);
typedef void (GLAPICALL * PGLAPIGETSHADERIV_PROC)(GLuint shader, GLenum pname, GLint * params);
typedef GLint (GLAPICALL * PGLAPIGETUNIFORMLOCATION_PROC)(GLuint program, const GLchar * name);
typedef void (GLAPICALL * PGLAPIGETUNIFORMFV_PROC)(GLuint program, GLint location, GLfloat * params);
typedef void (GLAPICALL * PGLAPIGETUNIFORMIV_PROC)(GLuint program, GLint location, GLint * params);
typedef void (GLAPICALL * PGLAPIGETVERTEXATTRIBPOINTERV_PROC)(GLuint index, GLenum pname, void ** pointer);
typedef void (GLAPICALL * PGLAPIGETVERTEXATTRIBDV_PROC)(GLuint index, GLenum pname, GLdouble * params);
typedef void (GLAPICALL * PGLAPIGETVERTEXATTRIBFV_PROC)(GLuint index, GLenum pname, GLfloat * params);
typedef void (GLAPICALL * PGLAPIGETVERTEXATTRIBIV_PROC)(GLuint index, GLenum pname, GLint * params);
typedef GLboolean (GLAPICALL * PGLAPIISPROGRAM_PROC)(GLuint program);
typedef GLboolean (GLAPICALL * PGLAPIISSHADER_PROC)(GLuint shader);
typedef void (GLAPICALL * PGLAPILINKPROGRAM_PROC)(GLuint program);
typedef void (GLAPICALL * PGLAPISHADERSOURCE_PROC)(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length);
typedef void (GLAPICALL * PGLAPISTENCILFUNCSEPARATE_PROC)(GLenum face, GLenum func, GLint ref, GLuint mask);
typedef void (GLAPICALL * PGLAPISTENCILMASKSEPARATE_PROC)(GLenum face, GLuint mask);
typedef void (GLAPICALL * PGLAPISTENCILOPSEPARATE_PROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
typedef void (GLAPICALL * PGLAPIUSEPROGRAM_PROC)(GLuint program);
typedef void (GLAPICALL * PGLAPIVALIDATEPROGRAM_PROC)(GLuint program);

#define glAttachShader ((PGLAPIATTACHSHADER_PROC)glapi[EGLAPI_glAttachShader].f)
#define glBindAttribLocation ((PGLAPIBINDATTRIBLOCATION_PROC)glapi[EGLAPI_glBindAttribLocation].f)
#define glBlendEquationSeparate ((PGLAPIBLENDEQUATIONSEPARATE_PROC)glapi[EGLAPI_glBlendEquationSeparate].f)
#define glCompileShader ((PGLAPICOMPILESHADER_PROC)glapi[EGLAPI_glCompileShader].f)
#define glCreateProgram ((PGLAPICREATEPROGRAM_PROC)glapi[EGLAPI_glCreateProgram].f)
#define glCreateShader ((PGLAPICREATESHADER_PROC)glapi[EGLAPI_glCreateShader].f)
#define glDeleteProgram ((PGLAPIDELETEPROGRAM_PROC)glapi[EGLAPI_glDeleteProgram].f)
#define glDeleteShader ((PGLAPIDELETESHADER_PROC)glapi[EGLAPI_glDeleteShader].f)
#define glDetachShader ((PGLAPIDETACHSHADER_PROC)glapi[EGLAPI_glDetachShader].f)
#define glDisableVertexAttribArray ((PGLAPIDISABLEVERTEXATTRIBARRAY_PROC)glapi[EGLAPI_glDisableVertexAttribArray].f)
#define glDrawBuffers ((PGLAPIDRAWBUFFERS_PROC)glapi[EGLAPI_glDrawBuffers].f)
#define glEnableVertexAttribArray ((PGLAPIENABLEVERTEXATTRIBARRAY_PROC)glapi[EGLAPI_glEnableVertexAttribArray].f)
#define glGetActiveAttrib ((PGLAPIGETACTIVEATTRIB_PROC)glapi[EGLAPI_glGetActiveAttrib].f)
#define glGetActiveUniform ((PGLAPIGETACTIVEUNIFORM_PROC)glapi[EGLAPI_glGetActiveUniform].f)
#define glGetAttachedShaders ((PGLAPIGETATTACHEDSHADERS_PROC)glapi[EGLAPI_glGetAttachedShaders].f)
#define glGetAttribLocation ((PGLAPIGETATTRIBLOCATION_PROC)glapi[EGLAPI_glGetAttribLocation].f)
#define glGetProgramInfoLog ((PGLAPIGETPROGRAMINFOLOG_PROC)glapi[EGLAPI_glGetProgramInfoLog].f)
#define glGetProgramiv ((PGLAPIGETPROGRAMIV_PROC)glapi[EGLAPI_glGetProgramiv].f)
#define glGetShaderInfoLog ((PGLAPIGETSHADERINFOLOG_PROC)glapi[EGLAPI_glGetShaderInfoLog].f)
#define glGetShaderSource ((PGLAPIGETSHADERSOURCE_PROC)glapi[EGLAPI_glGetShaderSource].f)
#define glGetShaderiv ((PGLAPIGETSHADERIV_PROC)glapi[EGLAPI_glGetShaderiv].f)
#define glGetUniformLocation ((PGLAPIGETUNIFORMLOCATION_PROC)glapi[EGLAPI_glGetUniformLocation].f)
#define glGetUniformfv ((PGLAPIGETUNIFORMFV_PROC)glapi[EGLAPI_glGetUniformfv].f)
#define glGetUniformiv ((PGLAPIGETUNIFORMIV_PROC)glapi[EGLAPI_glGetUniformiv].f)
#define glGetVertexAttribPointerv ((PGLAPIGETVERTEXATTRIBPOINTERV_PROC)glapi[EGLAPI_glGetVertexAttribPointerv].f)
#define glGetVertexAttribdv ((PGLAPIGETVERTEXATTRIBDV_PROC)glapi[EGLAPI_glGetVertexAttribdv].f)
#define glGetVertexAttribfv ((PGLAPIGETVERTEXATTRIBFV_PROC)glapi[EGLAPI_glGetVertexAttribfv].f)
#define glGetVertexAttribiv ((PGLAPIGETVERTEXATTRIBIV_PROC)glapi[EGLAPI_glGetVertexAttribiv].f)
#define glIsProgram ((PGLAPIISPROGRAM_PROC)glapi[EGLAPI_glIsProgram].f)
#define glIsShader ((PGLAPIISSHADER_PROC)glapi[EGLAPI_glIsShader].f)
#define glLinkProgram ((PGLAPILINKPROGRAM_PROC)glapi[EGLAPI_glLinkProgram].f)
#define glShaderSource ((PGLAPISHADERSOURCE_PROC)glapi[EGLAPI_glShaderSource].f)
#define glStencilFuncSeparate ((PGLAPISTENCILFUNCSEPARATE_PROC)glapi[EGLAPI_glStencilFuncSeparate].f)
#define glStencilMaskSeparate ((PGLAPISTENCILMASKSEPARATE_PROC)glapi[EGLAPI_glStencilMaskSeparate].f)
#define glStencilOpSeparate ((PGLAPISTENCILOPSEPARATE_PROC)glapi[EGLAPI_glStencilOpSeparate].f)
#define glUseProgram ((PGLAPIUSEPROGRAM_PROC)glapi[EGLAPI_glUseProgram].f)
#define glValidateProgram ((PGLAPIVALIDATEPROGRAM_PROC)glapi[EGLAPI_glValidateProgram].f)

#define GL_VERSION_2_1



#define GL_VERSION_3_0

typedef void (GLAPICALL * PGLAPIBEGINCONDITIONALRENDER_PROC)(GLuint id, GLenum mode);
typedef void (GLAPICALL * PGLAPIBEGINTRANSFORMFEEDBACK_PROC)(GLenum primitiveMode);
typedef void (GLAPICALL * PGLAPIBINDBUFFERBASE_PROC)(GLenum target, GLuint index, GLuint buffer);
typedef void (GLAPICALL * PGLAPIBINDBUFFERRANGE_PROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAPICALL * PGLAPIBINDFRAGDATALOCATION_PROC)(GLuint program, GLuint color, const GLchar * name);
typedef void (GLAPICALL * PGLAPIBINDFRAMEBUFFER_PROC)(GLenum target, GLuint framebuffer);
typedef void (GLAPICALL * PGLAPIBINDRENDERBUFFER_PROC)(GLenum target, GLuint renderbuffer);
typedef void (GLAPICALL * PGLAPIBINDVERTEXARRAY_PROC)(GLuint array);
typedef void (GLAPICALL * PGLAPIBLITFRAMEBUFFER_PROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef GLenum (GLAPICALL * PGLAPICHECKFRAMEBUFFERSTATUS_PROC)(GLenum target);
typedef void (GLAPICALL * PGLAPICLAMPCOLOR_PROC)(GLenum target, GLenum clamp);
typedef void (GLAPICALL * PGLAPICLEARBUFFERFI_PROC)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef void (GLAPICALL * PGLAPICLEARBUFFERFV_PROC)(GLenum buffer, GLint drawbuffer, const GLfloat * value);
typedef void (GLAPICALL * PGLAPICLEARBUFFERIV_PROC)(GLenum buffer, GLint drawbuffer, const GLint * value);
typedef void (GLAPICALL * PGLAPICLEARBUFFERUIV_PROC)(GLenum buffer, GLint drawbuffer, const GLuint * value);
typedef void (GLAPICALL * PGLAPICOLORMASKI_PROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
typedef void (GLAPICALL * PGLAPIDELETEFRAMEBUFFERS_PROC)(GLsizei n, const GLuint * framebuffers);
typedef void (GLAPICALL * PGLAPIDELETERENDERBUFFERS_PROC)(GLsizei n, const GLuint * renderbuffers);
typedef void (GLAPICALL * PGLAPIDELETEVERTEXARRAYS_PROC)(GLsizei n, const GLuint * arrays);
typedef void (GLAPICALL * PGLAPIDISABLEI_PROC)(GLenum target, GLuint index);
typedef void (GLAPICALL * PGLAPIENABLEI_PROC)(GLenum target, GLuint index);
typedef void (GLAPICALL * PGLAPIENDCONDITIONALRENDER_PROC)(void);
typedef void (GLAPICALL * PGLAPIENDTRANSFORMFEEDBACK_PROC)(void);
typedef void (GLAPICALL * PGLAPIFLUSHMAPPEDBUFFERRANGE_PROC)(GLenum target, GLintptr offset, GLsizeiptr length);
typedef void (GLAPICALL * PGLAPIFRAMEBUFFERRENDERBUFFER_PROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (GLAPICALL * PGLAPIFRAMEBUFFERTEXTURE1D_PROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAPICALL * PGLAPIFRAMEBUFFERTEXTURE2D_PROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
typedef void (GLAPICALL * PGLAPIFRAMEBUFFERTEXTURE3D_PROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
typedef void (GLAPICALL * PGLAPIFRAMEBUFFERTEXTURELAYER_PROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAPICALL * PGLAPIGENFRAMEBUFFERS_PROC)(GLsizei n, GLuint * framebuffers);
typedef void (GLAPICALL * PGLAPIGENRENDERBUFFERS_PROC)(GLsizei n, GLuint * renderbuffers);
typedef void (GLAPICALL * PGLAPIGENVERTEXARRAYS_PROC)(GLsizei n, GLuint * arrays);
typedef void (GLAPICALL * PGLAPIGENERATEMIPMAP_PROC)(GLenum target);
typedef void (GLAPICALL * PGLAPIGETBOOLEANI_V_PROC)(GLenum target, GLuint index, GLboolean * data);
typedef GLint (GLAPICALL * PGLAPIGETFRAGDATALOCATION_PROC)(GLuint program, const GLchar * name);
typedef void (GLAPICALL * PGLAPIGETFRAMEBUFFERATTACHMENTPARAMETERIV_PROC)(GLenum target, GLenum attachment, GLenum pname, GLint * params);
typedef void (GLAPICALL * PGLAPIGETINTEGERI_V_PROC)(GLenum target, GLuint index, GLint * data);
typedef void (GLAPICALL * PGLAPIGETRENDERBUFFERPARAMETERIV_PROC)(GLenum target, GLenum pname, GLint * params);
typedef const GLubyte * (GLAPICALL * PGLAPIGETSTRINGI_PROC)(GLenum name, GLuint index);
typedef void (GLAPICALL * PGLAPIGETTEXPARAMETERIIV_PROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAPICALL * PGLAPIGETTEXPARAMETERIUIV_PROC)(GLenum target, GLenum pname, GLuint * params);
typedef void (GLAPICALL * PGLAPIGETTRANSFORMFEEDBACKVARYING_PROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
typedef void (GLAPICALL * PGLAPIGETUNIFORMUIV_PROC)(GLuint program, GLint location, GLuint * params);
typedef void (GLAPICALL * PGLAPIGETVERTEXATTRIBIIV_PROC)(GLuint index, GLenum pname, GLint * params);
typedef void (GLAPICALL * PGLAPIGETVERTEXATTRIBIUIV_PROC)(GLuint index, GLenum pname, GLuint * params);
typedef GLboolean (GLAPICALL * PGLAPIISENABLEDI_PROC)(GLenum target, GLuint index);
typedef GLboolean (GLAPICALL * PGLAPIISFRAMEBUFFER_PROC)(GLuint framebuffer);
typedef GLboolean (GLAPICALL * PGLAPIISRENDERBUFFER_PROC)(GLuint renderbuffer);
typedef GLboolean (GLAPICALL * PGLAPIISVERTEXARRAY_PROC)(GLuint array);
typedef void * (GLAPICALL * PGLAPIMAPBUFFERRANGE_PROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (GLAPICALL * PGLAPIRENDERBUFFERSTORAGE_PROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAPICALL * PGLAPIRENDERBUFFERSTORAGEMULTISAMPLE_PROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAPICALL * PGLAPITEXPARAMETERIIV_PROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAPICALL * PGLAPITEXPARAMETERIUIV_PROC)(GLenum target, GLenum pname, const GLuint * params);
typedef void (GLAPICALL * PGLAPITRANSFORMFEEDBACKVARYINGS_PROC)(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode);

#define glBeginConditionalRender ((PGLAPIBEGINCONDITIONALRENDER_PROC)glapi[EGLAPI_glBeginConditionalRender].f)
#define glBeginTransformFeedback ((PGLAPIBEGINTRANSFORMFEEDBACK_PROC)glapi[EGLAPI_glBeginTransformFeedback].f)
#define glBindBufferBase ((PGLAPIBINDBUFFERBASE_PROC)glapi[EGLAPI_glBindBufferBase].f)
#define glBindBufferRange ((PGLAPIBINDBUFFERRANGE_PROC)glapi[EGLAPI_glBindBufferRange].f)
#define glBindFragDataLocation ((PGLAPIBINDFRAGDATALOCATION_PROC)glapi[EGLAPI_glBindFragDataLocation].f)
#define glBindFramebuffer ((PGLAPIBINDFRAMEBUFFER_PROC)glapi[EGLAPI_glBindFramebuffer].f)
#define glBindRenderbuffer ((PGLAPIBINDRENDERBUFFER_PROC)glapi[EGLAPI_glBindRenderbuffer].f)
#define glBindVertexArray ((PGLAPIBINDVERTEXARRAY_PROC)glapi[EGLAPI_glBindVertexArray].f)
#define glBlitFramebuffer ((PGLAPIBLITFRAMEBUFFER_PROC)glapi[EGLAPI_glBlitFramebuffer].f)
#define glCheckFramebufferStatus ((PGLAPICHECKFRAMEBUFFERSTATUS_PROC)glapi[EGLAPI_glCheckFramebufferStatus].f)
#define glClampColor ((PGLAPICLAMPCOLOR_PROC)glapi[EGLAPI_glClampColor].f)
#define glClearBufferfi ((PGLAPICLEARBUFFERFI_PROC)glapi[EGLAPI_glClearBufferfi].f)
#define glClearBufferfv ((PGLAPICLEARBUFFERFV_PROC)glapi[EGLAPI_glClearBufferfv].f)
#define glClearBufferiv ((PGLAPICLEARBUFFERIV_PROC)glapi[EGLAPI_glClearBufferiv].f)
#define glClearBufferuiv ((PGLAPICLEARBUFFERUIV_PROC)glapi[EGLAPI_glClearBufferuiv].f)
#define glColorMaski ((PGLAPICOLORMASKI_PROC)glapi[EGLAPI_glColorMaski].f)
#define glDeleteFramebuffers ((PGLAPIDELETEFRAMEBUFFERS_PROC)glapi[EGLAPI_glDeleteFramebuffers].f)
#define glDeleteRenderbuffers ((PGLAPIDELETERENDERBUFFERS_PROC)glapi[EGLAPI_glDeleteRenderbuffers].f)
#define glDeleteVertexArrays ((PGLAPIDELETEVERTEXARRAYS_PROC)glapi[EGLAPI_glDeleteVertexArrays].f)
#define glDisablei ((PGLAPIDISABLEI_PROC)glapi[EGLAPI_glDisablei].f)
#define glEnablei ((PGLAPIENABLEI_PROC)glapi[EGLAPI_glEnablei].f)
#define glEndConditionalRender ((PGLAPIENDCONDITIONALRENDER_PROC)glapi[EGLAPI_glEndConditionalRender].f)
#define glEndTransformFeedback ((PGLAPIENDTRANSFORMFEEDBACK_PROC)glapi[EGLAPI_glEndTransformFeedback].f)
#define glFlushMappedBufferRange ((PGLAPIFLUSHMAPPEDBUFFERRANGE_PROC)glapi[EGLAPI_glFlushMappedBufferRange].f)
#define glFramebufferRenderbuffer ((PGLAPIFRAMEBUFFERRENDERBUFFER_PROC)glapi[EGLAPI_glFramebufferRenderbuffer].f)
#define glFramebufferTexture1D ((PGLAPIFRAMEBUFFERTEXTURE1D_PROC)glapi[EGLAPI_glFramebufferTexture1D].f)
#define glFramebufferTexture2D ((PGLAPIFRAMEBUFFERTEXTURE2D_PROC)glapi[EGLAPI_glFramebufferTexture2D].f)
#define glFramebufferTexture3D ((PGLAPIFRAMEBUFFERTEXTURE3D_PROC)glapi[EGLAPI_glFramebufferTexture3D].f)
#define glFramebufferTextureLayer ((PGLAPIFRAMEBUFFERTEXTURELAYER_PROC)glapi[EGLAPI_glFramebufferTextureLayer].f)
#define glGenFramebuffers ((PGLAPIGENFRAMEBUFFERS_PROC)glapi[EGLAPI_glGenFramebuffers].f)
#define glGenRenderbuffers ((PGLAPIGENRENDERBUFFERS_PROC)glapi[EGLAPI_glGenRenderbuffers].f)
#define glGenVertexArrays ((PGLAPIGENVERTEXARRAYS_PROC)glapi[EGLAPI_glGenVertexArrays].f)
#define glGenerateMipmap ((PGLAPIGENERATEMIPMAP_PROC)glapi[EGLAPI_glGenerateMipmap].f)
#define glGetBooleani_v ((PGLAPIGETBOOLEANI_V_PROC)glapi[EGLAPI_glGetBooleani_v].f)
#define glGetFragDataLocation ((PGLAPIGETFRAGDATALOCATION_PROC)glapi[EGLAPI_glGetFragDataLocation].f)
#define glGetFramebufferAttachmentParameteriv ((PGLAPIGETFRAMEBUFFERATTACHMENTPARAMETERIV_PROC)glapi[EGLAPI_glGetFramebufferAttachmentParameteriv].f)
#define glGetIntegeri_v ((PGLAPIGETINTEGERI_V_PROC)glapi[EGLAPI_glGetIntegeri_v].f)
#define glGetRenderbufferParameteriv ((PGLAPIGETRENDERBUFFERPARAMETERIV_PROC)glapi[EGLAPI_glGetRenderbufferParameteriv].f)
#define glGetStringi ((PGLAPIGETSTRINGI_PROC)glapi[EGLAPI_glGetStringi].f)
#define glGetTexParameterIiv ((PGLAPIGETTEXPARAMETERIIV_PROC)glapi[EGLAPI_glGetTexParameterIiv].f)
#define glGetTexParameterIuiv ((PGLAPIGETTEXPARAMETERIUIV_PROC)glapi[EGLAPI_glGetTexParameterIuiv].f)
#define glGetTransformFeedbackVarying ((PGLAPIGETTRANSFORMFEEDBACKVARYING_PROC)glapi[EGLAPI_glGetTransformFeedbackVarying].f)
#define glGetUniformuiv ((PGLAPIGETUNIFORMUIV_PROC)glapi[EGLAPI_glGetUniformuiv].f)
#define glGetVertexAttribIiv ((PGLAPIGETVERTEXATTRIBIIV_PROC)glapi[EGLAPI_glGetVertexAttribIiv].f)
#define glGetVertexAttribIuiv ((PGLAPIGETVERTEXATTRIBIUIV_PROC)glapi[EGLAPI_glGetVertexAttribIuiv].f)
#define glIsEnabledi ((PGLAPIISENABLEDI_PROC)glapi[EGLAPI_glIsEnabledi].f)
#define glIsFramebuffer ((PGLAPIISFRAMEBUFFER_PROC)glapi[EGLAPI_glIsFramebuffer].f)
#define glIsRenderbuffer ((PGLAPIISRENDERBUFFER_PROC)glapi[EGLAPI_glIsRenderbuffer].f)
#define glIsVertexArray ((PGLAPIISVERTEXARRAY_PROC)glapi[EGLAPI_glIsVertexArray].f)
#define glMapBufferRange ((PGLAPIMAPBUFFERRANGE_PROC)glapi[EGLAPI_glMapBufferRange].f)
#define glRenderbufferStorage ((PGLAPIRENDERBUFFERSTORAGE_PROC)glapi[EGLAPI_glRenderbufferStorage].f)
#define glRenderbufferStorageMultisample ((PGLAPIRENDERBUFFERSTORAGEMULTISAMPLE_PROC)glapi[EGLAPI_glRenderbufferStorageMultisample].f)
#define glTexParameterIiv ((PGLAPITEXPARAMETERIIV_PROC)glapi[EGLAPI_glTexParameterIiv].f)
#define glTexParameterIuiv ((PGLAPITEXPARAMETERIUIV_PROC)glapi[EGLAPI_glTexParameterIuiv].f)
#define glTransformFeedbackVaryings ((PGLAPITRANSFORMFEEDBACKVARYINGS_PROC)glapi[EGLAPI_glTransformFeedbackVaryings].f)

#define GL_VERSION_3_1

typedef void (GLAPICALL * PGLAPICOPYBUFFERSUBDATA_PROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (GLAPICALL * PGLAPIDRAWARRAYSINSTANCED_PROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
typedef void (GLAPICALL * PGLAPIDRAWELEMENTSINSTANCED_PROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount);
typedef void (GLAPICALL * PGLAPIGETACTIVEUNIFORMBLOCKNAME_PROC)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName);
typedef void (GLAPICALL * PGLAPIGETACTIVEUNIFORMBLOCKIV_PROC)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params);
typedef void (GLAPICALL * PGLAPIGETACTIVEUNIFORMNAME_PROC)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName);
typedef void (GLAPICALL * PGLAPIGETACTIVEUNIFORMSIV_PROC)(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params);
typedef GLuint (GLAPICALL * PGLAPIGETUNIFORMBLOCKINDEX_PROC)(GLuint program, const GLchar * uniformBlockName);
typedef void (GLAPICALL * PGLAPIGETUNIFORMINDICES_PROC)(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices);
typedef void (GLAPICALL * PGLAPIPRIMITIVERESTARTINDEX_PROC)(GLuint index);
typedef void (GLAPICALL * PGLAPIUNIFORMBLOCKBINDING_PROC)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);

#define glCopyBufferSubData ((PGLAPICOPYBUFFERSUBDATA_PROC)glapi[EGLAPI_glCopyBufferSubData].f)
#define glDrawArraysInstanced ((PGLAPIDRAWARRAYSINSTANCED_PROC)glapi[EGLAPI_glDrawArraysInstanced].f)
#define glDrawElementsInstanced ((PGLAPIDRAWELEMENTSINSTANCED_PROC)glapi[EGLAPI_glDrawElementsInstanced].f)
#define glGetActiveUniformBlockName ((PGLAPIGETACTIVEUNIFORMBLOCKNAME_PROC)glapi[EGLAPI_glGetActiveUniformBlockName].f)
#define glGetActiveUniformBlockiv ((PGLAPIGETACTIVEUNIFORMBLOCKIV_PROC)glapi[EGLAPI_glGetActiveUniformBlockiv].f)
#define glGetActiveUniformName ((PGLAPIGETACTIVEUNIFORMNAME_PROC)glapi[EGLAPI_glGetActiveUniformName].f)
#define glGetActiveUniformsiv ((PGLAPIGETACTIVEUNIFORMSIV_PROC)glapi[EGLAPI_glGetActiveUniformsiv].f)
#define glGetUniformBlockIndex ((PGLAPIGETUNIFORMBLOCKINDEX_PROC)glapi[EGLAPI_glGetUniformBlockIndex].f)
#define glGetUniformIndices ((PGLAPIGETUNIFORMINDICES_PROC)glapi[EGLAPI_glGetUniformIndices].f)
#define glPrimitiveRestartIndex ((PGLAPIPRIMITIVERESTARTINDEX_PROC)glapi[EGLAPI_glPrimitiveRestartIndex].f)
#define glUniformBlockBinding ((PGLAPIUNIFORMBLOCKBINDING_PROC)glapi[EGLAPI_glUniformBlockBinding].f)

#define GL_VERSION_3_2

typedef GLenum (GLAPICALL * PGLAPICLIENTWAITSYNC_PROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
typedef void (GLAPICALL * PGLAPIDELETESYNC_PROC)(GLsync sync);
typedef void (GLAPICALL * PGLAPIDRAWELEMENTSBASEVERTEX_PROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex);
typedef void (GLAPICALL * PGLAPIDRAWELEMENTSINSTANCEDBASEVERTEX_PROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex);
typedef void (GLAPICALL * PGLAPIDRAWRANGEELEMENTSBASEVERTEX_PROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex);
typedef GLsync (GLAPICALL * PGLAPIFENCESYNC_PROC)(GLenum condition, GLbitfield flags);
typedef void (GLAPICALL * PGLAPIFRAMEBUFFERTEXTURE_PROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAPICALL * PGLAPIGETBUFFERPARAMETERI64V_PROC)(GLenum target, GLenum pname, GLint64 * params);
typedef void (GLAPICALL * PGLAPIGETINTEGER64I_V_PROC)(GLenum target, GLuint index, GLint64 * data);
typedef void (GLAPICALL * PGLAPIGETINTEGER64V_PROC)(GLenum pname, GLint64 * data);
typedef void (GLAPICALL * PGLAPIGETMULTISAMPLEFV_PROC)(GLenum pname, GLuint index, GLfloat * val);
typedef void (GLAPICALL * PGLAPIGETSYNCIV_PROC)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values);
typedef GLboolean (GLAPICALL * PGLAPIISSYNC_PROC)(GLsync sync);
typedef void (GLAPICALL * PGLAPIMULTIDRAWELEMENTSBASEVERTEX_PROC)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex);
typedef void (GLAPICALL * PGLAPIPROVOKINGVERTEX_PROC)(GLenum mode);
typedef void (GLAPICALL * PGLAPISAMPLEMASKI_PROC)(GLuint maskNumber, GLbitfield mask);
typedef void (GLAPICALL * PGLAPIWAITSYNC_PROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);

#define glClientWaitSync ((PGLAPICLIENTWAITSYNC_PROC)glapi[EGLAPI_glClientWaitSync].f)
#define glDeleteSync ((PGLAPIDELETESYNC_PROC)glapi[EGLAPI_glDeleteSync].f)
#define glDrawElementsBaseVertex ((PGLAPIDRAWELEMENTSBASEVERTEX_PROC)glapi[EGLAPI_glDrawElementsBaseVertex].f)
#define glDrawElementsInstancedBaseVertex ((PGLAPIDRAWELEMENTSINSTANCEDBASEVERTEX_PROC)glapi[EGLAPI_glDrawElementsInstancedBaseVertex].f)
#define glDrawRangeElementsBaseVertex ((PGLAPIDRAWRANGEELEMENTSBASEVERTEX_PROC)glapi[EGLAPI_glDrawRangeElementsBaseVertex].f)
#define glFenceSync ((PGLAPIFENCESYNC_PROC)glapi[EGLAPI_glFenceSync].f)
#define glFramebufferTexture ((PGLAPIFRAMEBUFFERTEXTURE_PROC)glapi[EGLAPI_glFramebufferTexture].f)
#define glGetBufferParameteri64v ((PGLAPIGETBUFFERPARAMETERI64V_PROC)glapi[EGLAPI_glGetBufferParameteri64v].f)
#define glGetInteger64i_v ((PGLAPIGETINTEGER64I_V_PROC)glapi[EGLAPI_glGetInteger64i_v].f)
#define glGetInteger64v ((PGLAPIGETINTEGER64V_PROC)glapi[EGLAPI_glGetInteger64v].f)
#define glGetMultisamplefv ((PGLAPIGETMULTISAMPLEFV_PROC)glapi[EGLAPI_glGetMultisamplefv].f)
#define glGetSynciv ((PGLAPIGETSYNCIV_PROC)glapi[EGLAPI_glGetSynciv].f)
#define glIsSync ((PGLAPIISSYNC_PROC)glapi[EGLAPI_glIsSync].f)
#define glMultiDrawElementsBaseVertex ((PGLAPIMULTIDRAWELEMENTSBASEVERTEX_PROC)glapi[EGLAPI_glMultiDrawElementsBaseVertex].f)
#define glProvokingVertex ((PGLAPIPROVOKINGVERTEX_PROC)glapi[EGLAPI_glProvokingVertex].f)
#define glSampleMaski ((PGLAPISAMPLEMASKI_PROC)glapi[EGLAPI_glSampleMaski].f)
#define glWaitSync ((PGLAPIWAITSYNC_PROC)glapi[EGLAPI_glWaitSync].f)

#define GL_VERSION_3_3

typedef void (GLAPICALL * PGLAPIBINDFRAGDATALOCATIONINDEXED_PROC)(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name);
typedef void (GLAPICALL * PGLAPIBINDSAMPLER_PROC)(GLuint unit, GLuint sampler);
typedef void (GLAPICALL * PGLAPIDELETESAMPLERS_PROC)(GLsizei count, const GLuint * samplers);
typedef GLint (GLAPICALL * PGLAPIGETFRAGDATAINDEX_PROC)(GLuint program, const GLchar * name);
typedef void (GLAPICALL * PGLAPIGETQUERYOBJECTI64V_PROC)(GLuint id, GLenum pname, GLint64 * params);
typedef void (GLAPICALL * PGLAPIGETQUERYOBJECTUI64V_PROC)(GLuint id, GLenum pname, GLuint64 * params);
typedef void (GLAPICALL * PGLAPIGETSAMPLERPARAMETERIIV_PROC)(GLuint sampler, GLenum pname, GLint * params);
typedef void (GLAPICALL * PGLAPIGETSAMPLERPARAMETERIUIV_PROC)(GLuint sampler, GLenum pname, GLuint * params);
typedef void (GLAPICALL * PGLAPIGETSAMPLERPARAMETERFV_PROC)(GLuint sampler, GLenum pname, GLfloat * params);
typedef void (GLAPICALL * PGLAPIGETSAMPLERPARAMETERIV_PROC)(GLuint sampler, GLenum pname, GLint * params);
typedef GLboolean (GLAPICALL * PGLAPIISSAMPLER_PROC)(GLuint sampler);
typedef void (GLAPICALL * PGLAPIQUERYCOUNTER_PROC)(GLuint id, GLenum target);
typedef void (GLAPICALL * PGLAPISAMPLERPARAMETERIIV_PROC)(GLuint sampler, GLenum pname, const GLint * param);
typedef void (GLAPICALL * PGLAPISAMPLERPARAMETERIUIV_PROC)(GLuint sampler, GLenum pname, const GLuint * param);
typedef void (GLAPICALL * PGLAPISAMPLERPARAMETERF_PROC)(GLuint sampler, GLenum pname, GLfloat param);
typedef void (GLAPICALL * PGLAPISAMPLERPARAMETERFV_PROC)(GLuint sampler, GLenum pname, const GLfloat * param);
typedef void (GLAPICALL * PGLAPISAMPLERPARAMETERI_PROC)(GLuint sampler, GLenum pname, GLint param);
typedef void (GLAPICALL * PGLAPISAMPLERPARAMETERIV_PROC)(GLuint sampler, GLenum pname, const GLint * param);

#define glBindFragDataLocationIndexed ((PGLAPIBINDFRAGDATALOCATIONINDEXED_PROC)glapi[EGLAPI_glBindFragDataLocationIndexed].f)
#define glBindSampler ((PGLAPIBINDSAMPLER_PROC)glapi[EGLAPI_glBindSampler].f)
#define glDeleteSamplers ((PGLAPIDELETESAMPLERS_PROC)glapi[EGLAPI_glDeleteSamplers].f)
#define glGetFragDataIndex ((PGLAPIGETFRAGDATAINDEX_PROC)glapi[EGLAPI_glGetFragDataIndex].f)
#define glGetQueryObjecti64v ((PGLAPIGETQUERYOBJECTI64V_PROC)glapi[EGLAPI_glGetQueryObjecti64v].f)
#define glGetQueryObjectui64v ((PGLAPIGETQUERYOBJECTUI64V_PROC)glapi[EGLAPI_glGetQueryObjectui64v].f)
#define glGetSamplerParameterIiv ((PGLAPIGETSAMPLERPARAMETERIIV_PROC)glapi[EGLAPI_glGetSamplerParameterIiv].f)
#define glGetSamplerParameterIuiv ((PGLAPIGETSAMPLERPARAMETERIUIV_PROC)glapi[EGLAPI_glGetSamplerParameterIuiv].f)
#define glGetSamplerParameterfv ((PGLAPIGETSAMPLERPARAMETERFV_PROC)glapi[EGLAPI_glGetSamplerParameterfv].f)
#define glGetSamplerParameteriv ((PGLAPIGETSAMPLERPARAMETERIV_PROC)glapi[EGLAPI_glGetSamplerParameteriv].f)
#define glIsSampler ((PGLAPIISSAMPLER_PROC)glapi[EGLAPI_glIsSampler].f)
#define glQueryCounter ((PGLAPIQUERYCOUNTER_PROC)glapi[EGLAPI_glQueryCounter].f)
#define glSamplerParameterIiv ((PGLAPISAMPLERPARAMETERIIV_PROC)glapi[EGLAPI_glSamplerParameterIiv].f)
#define glSamplerParameterIuiv ((PGLAPISAMPLERPARAMETERIUIV_PROC)glapi[EGLAPI_glSamplerParameterIuiv].f)
#define glSamplerParameterf ((PGLAPISAMPLERPARAMETERF_PROC)glapi[EGLAPI_glSamplerParameterf].f)
#define glSamplerParameterfv ((PGLAPISAMPLERPARAMETERFV_PROC)glapi[EGLAPI_glSamplerParameterfv].f)
#define glSamplerParameteri ((PGLAPISAMPLERPARAMETERI_PROC)glapi[EGLAPI_glSamplerParameteri].f)
#define glSamplerParameteriv ((PGLAPISAMPLERPARAMETERIV_PROC)glapi[EGLAPI_glSamplerParameteriv].f)

#define GL_VERSION_4_0

typedef void (GLAPICALL * PGLAPIBEGINQUERYINDEXED_PROC)(GLenum target, GLuint index, GLuint id);
typedef void (GLAPICALL * PGLAPIBINDTRANSFORMFEEDBACK_PROC)(GLenum target, GLuint id);
typedef void (GLAPICALL * PGLAPIBLENDEQUATIONSEPARATEI_PROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
typedef void (GLAPICALL * PGLAPIBLENDEQUATIONI_PROC)(GLuint buf, GLenum mode);
typedef void (GLAPICALL * PGLAPIBLENDFUNCSEPARATEI_PROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
typedef void (GLAPICALL * PGLAPIBLENDFUNCI_PROC)(GLuint buf, GLenum src, GLenum dst);
typedef void (GLAPICALL * PGLAPIDELETETRANSFORMFEEDBACKS_PROC)(GLsizei n, const GLuint * ids);
typedef void (GLAPICALL * PGLAPIDRAWARRAYSINDIRECT_PROC)(GLenum mode, const void * indirect);
typedef void (GLAPICALL * PGLAPIDRAWELEMENTSINDIRECT_PROC)(GLenum mode, GLenum type, const void * indirect);
typedef void (GLAPICALL * PGLAPIDRAWTRANSFORMFEEDBACK_PROC)(GLenum mode, GLuint id);
typedef void (GLAPICALL * PGLAPIDRAWTRANSFORMFEEDBACKSTREAM_PROC)(GLenum mode, GLuint id, GLuint stream);
typedef void (GLAPICALL * PGLAPIENDQUERYINDEXED_PROC)(GLenum target, GLuint index);
typedef void (GLAPICALL * PGLAPIGENTRANSFORMFEEDBACKS_PROC)(GLsizei n, GLuint * ids);
typedef void (GLAPICALL * PGLAPIGETACTIVESUBROUTINENAME_PROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name);
typedef void (GLAPICALL * PGLAPIGETACTIVESUBROUTINEUNIFORMNAME_PROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name);
typedef void (GLAPICALL * PGLAPIGETACTIVESUBROUTINEUNIFORMIV_PROC)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values);
typedef void (GLAPICALL * PGLAPIGETPROGRAMSTAGEIV_PROC)(GLuint program, GLenum shadertype, GLenum pname, GLint * values);
typedef void (GLAPICALL * PGLAPIGETQUERYINDEXEDIV_PROC)(GLenum target, GLuint index, GLenum pname, GLint * params);
typedef GLuint (GLAPICALL * PGLAPIGETSUBROUTINEINDEX_PROC)(GLuint program, GLenum shadertype, const GLchar * name);
typedef GLint (GLAPICALL * PGLAPIGETSUBROUTINEUNIFORMLOCATION_PROC)(GLuint program, GLenum shadertype, const GLchar * name);
typedef void (GLAPICALL * PGLAPIGETUNIFORMSUBROUTINEUIV_PROC)(GLenum shadertype, GLint location, GLuint * params);
typedef void (GLAPICALL * PGLAPIGETUNIFORMDV_PROC)(GLuint program, GLint location, GLdouble * params);
typedef GLboolean (GLAPICALL * PGLAPIISTRANSFORMFEEDBACK_PROC)(GLuint id);
typedef void (GLAPICALL * PGLAPIMINSAMPLESHADING_PROC)(GLfloat value);
typedef void (GLAPICALL * PGLAPIPATCHPARAMETERFV_PROC)(GLenum pname, const GLfloat * values);
typedef void (GLAPICALL * PGLAPIPATCHPARAMETERI_PROC)(GLenum pname, GLint value);
typedef void (GLAPICALL * PGLAPIPAUSETRANSFORMFEEDBACK_PROC)(void);
typedef void (GLAPICALL * PGLAPIRESUMETRANSFORMFEEDBACK_PROC)(void);
typedef void (GLAPICALL * PGLAPIUNIFORMSUBROUTINESUIV_PROC)(GLenum shadertype, GLsizei count, const GLuint * indices);

#define glBeginQueryIndexed ((PGLAPIBEGINQUERYINDEXED_PROC)glapi[EGLAPI_glBeginQueryIndexed].f)
#define glBindTransformFeedback ((PGLAPIBINDTRANSFORMFEEDBACK_PROC)glapi[EGLAPI_glBindTransformFeedback].f)
#define glBlendEquationSeparatei ((PGLAPIBLENDEQUATIONSEPARATEI_PROC)glapi[EGLAPI_glBlendEquationSeparatei].f)
#define glBlendEquationi ((PGLAPIBLENDEQUATIONI_PROC)glapi[EGLAPI_glBlendEquationi].f)
#define glBlendFuncSeparatei ((PGLAPIBLENDFUNCSEPARATEI_PROC)glapi[EGLAPI_glBlendFuncSeparatei].f)
#define glBlendFunci ((PGLAPIBLENDFUNCI_PROC)glapi[EGLAPI_glBlendFunci].f)
#define glDeleteTransformFeedbacks ((PGLAPIDELETETRANSFORMFEEDBACKS_PROC)glapi[EGLAPI_glDeleteTransformFeedbacks].f)
#define glDrawArraysIndirect ((PGLAPIDRAWARRAYSINDIRECT_PROC)glapi[EGLAPI_glDrawArraysIndirect].f)
#define glDrawElementsIndirect ((PGLAPIDRAWELEMENTSINDIRECT_PROC)glapi[EGLAPI_glDrawElementsIndirect].f)
#define glDrawTransformFeedback ((PGLAPIDRAWTRANSFORMFEEDBACK_PROC)glapi[EGLAPI_glDrawTransformFeedback].f)
#define glDrawTransformFeedbackStream ((PGLAPIDRAWTRANSFORMFEEDBACKSTREAM_PROC)glapi[EGLAPI_glDrawTransformFeedbackStream].f)
#define glEndQueryIndexed ((PGLAPIENDQUERYINDEXED_PROC)glapi[EGLAPI_glEndQueryIndexed].f)
#define glGenTransformFeedbacks ((PGLAPIGENTRANSFORMFEEDBACKS_PROC)glapi[EGLAPI_glGenTransformFeedbacks].f)
#define glGetActiveSubroutineName ((PGLAPIGETACTIVESUBROUTINENAME_PROC)glapi[EGLAPI_glGetActiveSubroutineName].f)
#define glGetActiveSubroutineUniformName ((PGLAPIGETACTIVESUBROUTINEUNIFORMNAME_PROC)glapi[EGLAPI_glGetActiveSubroutineUniformName].f)
#define glGetActiveSubroutineUniformiv ((PGLAPIGETACTIVESUBROUTINEUNIFORMIV_PROC)glapi[EGLAPI_glGetActiveSubroutineUniformiv].f)
#define glGetProgramStageiv ((PGLAPIGETPROGRAMSTAGEIV_PROC)glapi[EGLAPI_glGetProgramStageiv].f)
#define glGetQueryIndexediv ((PGLAPIGETQUERYINDEXEDIV_PROC)glapi[EGLAPI_glGetQueryIndexediv].f)
#define glGetSubroutineIndex ((PGLAPIGETSUBROUTINEINDEX_PROC)glapi[EGLAPI_glGetSubroutineIndex].f)
#define glGetSubroutineUniformLocation ((PGLAPIGETSUBROUTINEUNIFORMLOCATION_PROC)glapi[EGLAPI_glGetSubroutineUniformLocation].f)
#define glGetUniformSubroutineuiv ((PGLAPIGETUNIFORMSUBROUTINEUIV_PROC)glapi[EGLAPI_glGetUniformSubroutineuiv].f)
#define glGetUniformdv ((PGLAPIGETUNIFORMDV_PROC)glapi[EGLAPI_glGetUniformdv].f)
#define glIsTransformFeedback ((PGLAPIISTRANSFORMFEEDBACK_PROC)glapi[EGLAPI_glIsTransformFeedback].f)
#define glMinSampleShading ((PGLAPIMINSAMPLESHADING_PROC)glapi[EGLAPI_glMinSampleShading].f)
#define glPatchParameterfv ((PGLAPIPATCHPARAMETERFV_PROC)glapi[EGLAPI_glPatchParameterfv].f)
#define glPatchParameteri ((PGLAPIPATCHPARAMETERI_PROC)glapi[EGLAPI_glPatchParameteri].f)
#define glPauseTransformFeedback ((PGLAPIPAUSETRANSFORMFEEDBACK_PROC)glapi[EGLAPI_glPauseTransformFeedback].f)
#define glResumeTransformFeedback ((PGLAPIRESUMETRANSFORMFEEDBACK_PROC)glapi[EGLAPI_glResumeTransformFeedback].f)
#define glUniformSubroutinesuiv ((PGLAPIUNIFORMSUBROUTINESUIV_PROC)glapi[EGLAPI_glUniformSubroutinesuiv].f)

#define GL_VERSION_4_1

typedef void (GLAPICALL * PGLAPIACTIVESHADERPROGRAM_PROC)(GLuint pipeline, GLuint program);
typedef void (GLAPICALL * PGLAPIBINDPROGRAMPIPELINE_PROC)(GLuint pipeline);
typedef void (GLAPICALL * PGLAPICLEARDEPTHF_PROC)(GLfloat d);
typedef GLuint (GLAPICALL * PGLAPICREATESHADERPROGRAMV_PROC)(GLenum type, GLsizei count, const GLchar *const* strings);
typedef void (GLAPICALL * PGLAPIDELETEPROGRAMPIPELINES_PROC)(GLsizei n, const GLuint * pipelines);
typedef void (GLAPICALL * PGLAPIDEPTHRANGEARRAYV_PROC)(GLuint first, GLsizei count, const GLdouble * v);
typedef void (GLAPICALL * PGLAPIDEPTHRANGEINDEXED_PROC)(GLuint index, GLdouble n, GLdouble f);
typedef void (GLAPICALL * PGLAPIDEPTHRANGEF_PROC)(GLfloat n, GLfloat f);
typedef void (GLAPICALL * PGLAPIGENPROGRAMPIPELINES_PROC)(GLsizei n, GLuint * pipelines);
typedef void (GLAPICALL * PGLAPIGETDOUBLEI_V_PROC)(GLenum target, GLuint index, GLdouble * data);
typedef void (GLAPICALL * PGLAPIGETFLOATI_V_PROC)(GLenum target, GLuint index, GLfloat * data);
typedef void (GLAPICALL * PGLAPIGETPROGRAMBINARY_PROC)(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary);
typedef void (GLAPICALL * PGLAPIGETPROGRAMPIPELINEINFOLOG_PROC)(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
typedef void (GLAPICALL * PGLAPIGETPROGRAMPIPELINEIV_PROC)(GLuint pipeline, GLenum pname, GLint * params);
typedef void (GLAPICALL * PGLAPIGETSHADERPRECISIONFORMAT_PROC)(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision);
typedef void (GLAPICALL * PGLAPIGETVERTEXATTRIBLDV_PROC)(GLuint index, GLenum pname, GLdouble * params);
typedef GLboolean (GLAPICALL * PGLAPIISPROGRAMPIPELINE_PROC)(GLuint pipeline);
typedef void (GLAPICALL * PGLAPIPROGRAMBINARY_PROC)(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length);
typedef void (GLAPICALL * PGLAPIPROGRAMPARAMETERI_PROC)(GLuint program, GLenum pname, GLint value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM1D_PROC)(GLuint program, GLint location, GLdouble v0);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM1DV_PROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM1F_PROC)(GLuint program, GLint location, GLfloat v0);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM1FV_PROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM1I_PROC)(GLuint program, GLint location, GLint v0);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM1IV_PROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM1UI_PROC)(GLuint program, GLint location, GLuint v0);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM1UIV_PROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM2D_PROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM2DV_PROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM2F_PROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM2FV_PROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM2I_PROC)(GLuint program, GLint location, GLint v0, GLint v1);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM2IV_PROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM2UI_PROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM2UIV_PROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM3D_PROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM3DV_PROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM3F_PROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM3FV_PROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM3I_PROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM3IV_PROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM3UI_PROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM3UIV_PROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM4D_PROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM4DV_PROC)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM4F_PROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM4FV_PROC)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM4I_PROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM4IV_PROC)(GLuint program, GLint location, GLsizei count, const GLint * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM4UI_PROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORM4UIV_PROC)(GLuint program, GLint location, GLsizei count, const GLuint * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORMMATRIX2DV_PROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORMMATRIX2FV_PROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORMMATRIX2X3DV_PROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORMMATRIX2X3FV_PROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORMMATRIX2X4DV_PROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORMMATRIX2X4FV_PROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORMMATRIX3DV_PROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORMMATRIX3FV_PROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORMMATRIX3X2DV_PROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORMMATRIX3X2FV_PROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORMMATRIX3X4DV_PROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORMMATRIX3X4FV_PROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORMMATRIX4DV_PROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORMMATRIX4FV_PROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORMMATRIX4X2DV_PROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORMMATRIX4X2FV_PROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORMMATRIX4X3DV_PROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
typedef void (GLAPICALL * PGLAPIPROGRAMUNIFORMMATRIX4X3FV_PROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
typedef void (GLAPICALL * PGLAPIRELEASESHADERCOMPILER_PROC)(void);
typedef void (GLAPICALL * PGLAPISCISSORARRAYV_PROC)(GLuint first, GLsizei count, const GLint * v);
typedef void (GLAPICALL * PGLAPISCISSORINDEXED_PROC)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
typedef void (GLAPICALL * PGLAPISCISSORINDEXEDV_PROC)(GLuint index, const GLint * v);
typedef void (GLAPICALL * PGLAPISHADERBINARY_PROC)(GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length);
typedef void (GLAPICALL * PGLAPIUSEPROGRAMSTAGES_PROC)(GLuint pipeline, GLbitfield stages, GLuint program);
typedef void (GLAPICALL * PGLAPIVALIDATEPROGRAMPIPELINE_PROC)(GLuint pipeline);
typedef void (GLAPICALL * PGLAPIVIEWPORTARRAYV_PROC)(GLuint first, GLsizei count, const GLfloat * v);
typedef void (GLAPICALL * PGLAPIVIEWPORTINDEXEDF_PROC)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
typedef void (GLAPICALL * PGLAPIVIEWPORTINDEXEDFV_PROC)(GLuint index, const GLfloat * v);

#define glActiveShaderProgram ((PGLAPIACTIVESHADERPROGRAM_PROC)glapi[EGLAPI_glActiveShaderProgram].f)
#define glBindProgramPipeline ((PGLAPIBINDPROGRAMPIPELINE_PROC)glapi[EGLAPI_glBindProgramPipeline].f)
#define glClearDepthf ((PGLAPICLEARDEPTHF_PROC)glapi[EGLAPI_glClearDepthf].f)
#define glCreateShaderProgramv ((PGLAPICREATESHADERPROGRAMV_PROC)glapi[EGLAPI_glCreateShaderProgramv].f)
#define glDeleteProgramPipelines ((PGLAPIDELETEPROGRAMPIPELINES_PROC)glapi[EGLAPI_glDeleteProgramPipelines].f)
#define glDepthRangeArrayv ((PGLAPIDEPTHRANGEARRAYV_PROC)glapi[EGLAPI_glDepthRangeArrayv].f)
#define glDepthRangeIndexed ((PGLAPIDEPTHRANGEINDEXED_PROC)glapi[EGLAPI_glDepthRangeIndexed].f)
#define glDepthRangef ((PGLAPIDEPTHRANGEF_PROC)glapi[EGLAPI_glDepthRangef].f)
#define glGenProgramPipelines ((PGLAPIGENPROGRAMPIPELINES_PROC)glapi[EGLAPI_glGenProgramPipelines].f)
#define glGetDoublei_v ((PGLAPIGETDOUBLEI_V_PROC)glapi[EGLAPI_glGetDoublei_v].f)
#define glGetFloati_v ((PGLAPIGETFLOATI_V_PROC)glapi[EGLAPI_glGetFloati_v].f)
#define glGetProgramBinary ((PGLAPIGETPROGRAMBINARY_PROC)glapi[EGLAPI_glGetProgramBinary].f)
#define glGetProgramPipelineInfoLog ((PGLAPIGETPROGRAMPIPELINEINFOLOG_PROC)glapi[EGLAPI_glGetProgramPipelineInfoLog].f)
#define glGetProgramPipelineiv ((PGLAPIGETPROGRAMPIPELINEIV_PROC)glapi[EGLAPI_glGetProgramPipelineiv].f)
#define glGetShaderPrecisionFormat ((PGLAPIGETSHADERPRECISIONFORMAT_PROC)glapi[EGLAPI_glGetShaderPrecisionFormat].f)
#define glGetVertexAttribLdv ((PGLAPIGETVERTEXATTRIBLDV_PROC)glapi[EGLAPI_glGetVertexAttribLdv].f)
#define glIsProgramPipeline ((PGLAPIISPROGRAMPIPELINE_PROC)glapi[EGLAPI_glIsProgramPipeline].f)
#define glProgramBinary ((PGLAPIPROGRAMBINARY_PROC)glapi[EGLAPI_glProgramBinary].f)
#define glProgramParameteri ((PGLAPIPROGRAMPARAMETERI_PROC)glapi[EGLAPI_glProgramParameteri].f)
#define glProgramUniform1d ((PGLAPIPROGRAMUNIFORM1D_PROC)glapi[EGLAPI_glProgramUniform1d].f)
#define glProgramUniform1dv ((PGLAPIPROGRAMUNIFORM1DV_PROC)glapi[EGLAPI_glProgramUniform1dv].f)
#define glProgramUniform1f ((PGLAPIPROGRAMUNIFORM1F_PROC)glapi[EGLAPI_glProgramUniform1f].f)
#define glProgramUniform1fv ((PGLAPIPROGRAMUNIFORM1FV_PROC)glapi[EGLAPI_glProgramUniform1fv].f)
#define glProgramUniform1i ((PGLAPIPROGRAMUNIFORM1I_PROC)glapi[EGLAPI_glProgramUniform1i].f)
#define glProgramUniform1iv ((PGLAPIPROGRAMUNIFORM1IV_PROC)glapi[EGLAPI_glProgramUniform1iv].f)
#define glProgramUniform1ui ((PGLAPIPROGRAMUNIFORM1UI_PROC)glapi[EGLAPI_glProgramUniform1ui].f)
#define glProgramUniform1uiv ((PGLAPIPROGRAMUNIFORM1UIV_PROC)glapi[EGLAPI_glProgramUniform1uiv].f)
#define glProgramUniform2d ((PGLAPIPROGRAMUNIFORM2D_PROC)glapi[EGLAPI_glProgramUniform2d].f)
#define glProgramUniform2dv ((PGLAPIPROGRAMUNIFORM2DV_PROC)glapi[EGLAPI_glProgramUniform2dv].f)
#define glProgramUniform2f ((PGLAPIPROGRAMUNIFORM2F_PROC)glapi[EGLAPI_glProgramUniform2f].f)
#define glProgramUniform2fv ((PGLAPIPROGRAMUNIFORM2FV_PROC)glapi[EGLAPI_glProgramUniform2fv].f)
#define glProgramUniform2i ((PGLAPIPROGRAMUNIFORM2I_PROC)glapi[EGLAPI_glProgramUniform2i].f)
#define glProgramUniform2iv ((PGLAPIPROGRAMUNIFORM2IV_PROC)glapi[EGLAPI_glProgramUniform2iv].f)
#define glProgramUniform2ui ((PGLAPIPROGRAMUNIFORM2UI_PROC)glapi[EGLAPI_glProgramUniform2ui].f)
#define glProgramUniform2uiv ((PGLAPIPROGRAMUNIFORM2UIV_PROC)glapi[EGLAPI_glProgramUniform2uiv].f)
#define glProgramUniform3d ((PGLAPIPROGRAMUNIFORM3D_PROC)glapi[EGLAPI_glProgramUniform3d].f)
#define glProgramUniform3dv ((PGLAPIPROGRAMUNIFORM3DV_PROC)glapi[EGLAPI_glProgramUniform3dv].f)
#define glProgramUniform3f ((PGLAPIPROGRAMUNIFORM3F_PROC)glapi[EGLAPI_glProgramUniform3f].f)
#define glProgramUniform3fv ((PGLAPIPROGRAMUNIFORM3FV_PROC)glapi[EGLAPI_glProgramUniform3fv].f)
#define glProgramUniform3i ((PGLAPIPROGRAMUNIFORM3I_PROC)glapi[EGLAPI_glProgramUniform3i].f)
#define glProgramUniform3iv ((PGLAPIPROGRAMUNIFORM3IV_PROC)glapi[EGLAPI_glProgramUniform3iv].f)
#define glProgramUniform3ui ((PGLAPIPROGRAMUNIFORM3UI_PROC)glapi[EGLAPI_glProgramUniform3ui].f)
#define glProgramUniform3uiv ((PGLAPIPROGRAMUNIFORM3UIV_PROC)glapi[EGLAPI_glProgramUniform3uiv].f)
#define glProgramUniform4d ((PGLAPIPROGRAMUNIFORM4D_PROC)glapi[EGLAPI_glProgramUniform4d].f)
#define glProgramUniform4dv ((PGLAPIPROGRAMUNIFORM4DV_PROC)glapi[EGLAPI_glProgramUniform4dv].f)
#define glProgramUniform4f ((PGLAPIPROGRAMUNIFORM4F_PROC)glapi[EGLAPI_glProgramUniform4f].f)
#define glProgramUniform4fv ((PGLAPIPROGRAMUNIFORM4FV_PROC)glapi[EGLAPI_glProgramUniform4fv].f)
#define glProgramUniform4i ((PGLAPIPROGRAMUNIFORM4I_PROC)glapi[EGLAPI_glProgramUniform4i].f)
#define glProgramUniform4iv ((PGLAPIPROGRAMUNIFORM4IV_PROC)glapi[EGLAPI_glProgramUniform4iv].f)
#define glProgramUniform4ui ((PGLAPIPROGRAMUNIFORM4UI_PROC)glapi[EGLAPI_glProgramUniform4ui].f)
#define glProgramUniform4uiv ((PGLAPIPROGRAMUNIFORM4UIV_PROC)glapi[EGLAPI_glProgramUniform4uiv].f)
#define glProgramUniformMatrix2dv ((PGLAPIPROGRAMUNIFORMMATRIX2DV_PROC)glapi[EGLAPI_glProgramUniformMatrix2dv].f)
#define glProgramUniformMatrix2fv ((PGLAPIPROGRAMUNIFORMMATRIX2FV_PROC)glapi[EGLAPI_glProgramUniformMatrix2fv].f)
#define glProgramUniformMatrix2x3dv ((PGLAPIPROGRAMUNIFORMMATRIX2X3DV_PROC)glapi[EGLAPI_glProgramUniformMatrix2x3dv].f)
#define glProgramUniformMatrix2x3fv ((PGLAPIPROGRAMUNIFORMMATRIX2X3FV_PROC)glapi[EGLAPI_glProgramUniformMatrix2x3fv].f)
#define glProgramUniformMatrix2x4dv ((PGLAPIPROGRAMUNIFORMMATRIX2X4DV_PROC)glapi[EGLAPI_glProgramUniformMatrix2x4dv].f)
#define glProgramUniformMatrix2x4fv ((PGLAPIPROGRAMUNIFORMMATRIX2X4FV_PROC)glapi[EGLAPI_glProgramUniformMatrix2x4fv].f)
#define glProgramUniformMatrix3dv ((PGLAPIPROGRAMUNIFORMMATRIX3DV_PROC)glapi[EGLAPI_glProgramUniformMatrix3dv].f)
#define glProgramUniformMatrix3fv ((PGLAPIPROGRAMUNIFORMMATRIX3FV_PROC)glapi[EGLAPI_glProgramUniformMatrix3fv].f)
#define glProgramUniformMatrix3x2dv ((PGLAPIPROGRAMUNIFORMMATRIX3X2DV_PROC)glapi[EGLAPI_glProgramUniformMatrix3x2dv].f)
#define glProgramUniformMatrix3x2fv ((PGLAPIPROGRAMUNIFORMMATRIX3X2FV_PROC)glapi[EGLAPI_glProgramUniformMatrix3x2fv].f)
#define glProgramUniformMatrix3x4dv ((PGLAPIPROGRAMUNIFORMMATRIX3X4DV_PROC)glapi[EGLAPI_glProgramUniformMatrix3x4dv].f)
#define glProgramUniformMatrix3x4fv ((PGLAPIPROGRAMUNIFORMMATRIX3X4FV_PROC)glapi[EGLAPI_glProgramUniformMatrix3x4fv].f)
#define glProgramUniformMatrix4dv ((PGLAPIPROGRAMUNIFORMMATRIX4DV_PROC)glapi[EGLAPI_glProgramUniformMatrix4dv].f)
#define glProgramUniformMatrix4fv ((PGLAPIPROGRAMUNIFORMMATRIX4FV_PROC)glapi[EGLAPI_glProgramUniformMatrix4fv].f)
#define glProgramUniformMatrix4x2dv ((PGLAPIPROGRAMUNIFORMMATRIX4X2DV_PROC)glapi[EGLAPI_glProgramUniformMatrix4x2dv].f)
#define glProgramUniformMatrix4x2fv ((PGLAPIPROGRAMUNIFORMMATRIX4X2FV_PROC)glapi[EGLAPI_glProgramUniformMatrix4x2fv].f)
#define glProgramUniformMatrix4x3dv ((PGLAPIPROGRAMUNIFORMMATRIX4X3DV_PROC)glapi[EGLAPI_glProgramUniformMatrix4x3dv].f)
#define glProgramUniformMatrix4x3fv ((PGLAPIPROGRAMUNIFORMMATRIX4X3FV_PROC)glapi[EGLAPI_glProgramUniformMatrix4x3fv].f)
#define glReleaseShaderCompiler ((PGLAPIRELEASESHADERCOMPILER_PROC)glapi[EGLAPI_glReleaseShaderCompiler].f)
#define glScissorArrayv ((PGLAPISCISSORARRAYV_PROC)glapi[EGLAPI_glScissorArrayv].f)
#define glScissorIndexed ((PGLAPISCISSORINDEXED_PROC)glapi[EGLAPI_glScissorIndexed].f)
#define glScissorIndexedv ((PGLAPISCISSORINDEXEDV_PROC)glapi[EGLAPI_glScissorIndexedv].f)
#define glShaderBinary ((PGLAPISHADERBINARY_PROC)glapi[EGLAPI_glShaderBinary].f)
#define glUseProgramStages ((PGLAPIUSEPROGRAMSTAGES_PROC)glapi[EGLAPI_glUseProgramStages].f)
#define glValidateProgramPipeline ((PGLAPIVALIDATEPROGRAMPIPELINE_PROC)glapi[EGLAPI_glValidateProgramPipeline].f)
#define glViewportArrayv ((PGLAPIVIEWPORTARRAYV_PROC)glapi[EGLAPI_glViewportArrayv].f)
#define glViewportIndexedf ((PGLAPIVIEWPORTINDEXEDF_PROC)glapi[EGLAPI_glViewportIndexedf].f)
#define glViewportIndexedfv ((PGLAPIVIEWPORTINDEXEDFV_PROC)glapi[EGLAPI_glViewportIndexedfv].f)

#define GL_VERSION_4_2

typedef void (GLAPICALL * PGLAPIBINDIMAGETEXTURE_PROC)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
typedef void (GLAPICALL * PGLAPIDRAWARRAYSINSTANCEDBASEINSTANCE_PROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
typedef void (GLAPICALL * PGLAPIDRAWELEMENTSINSTANCEDBASEINSTANCE_PROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance);
typedef void (GLAPICALL * PGLAPIDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCE_PROC)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
typedef void (GLAPICALL * PGLAPIDRAWTRANSFORMFEEDBACKINSTANCED_PROC)(GLenum mode, GLuint id, GLsizei instancecount);
typedef void (GLAPICALL * PGLAPIDRAWTRANSFORMFEEDBACKSTREAMINSTANCED_PROC)(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
typedef void (GLAPICALL * PGLAPIGETACTIVEATOMICCOUNTERBUFFERIV_PROC)(GLuint program, GLuint bufferIndex, GLenum pname, GLint * params);
typedef void (GLAPICALL * PGLAPIGETINTERNALFORMATIV_PROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint * params);
typedef void (GLAPICALL * PGLAPIMEMORYBARRIER_PROC)(GLbitfield barriers);

#define glBindImageTexture ((PGLAPIBINDIMAGETEXTURE_PROC)glapi[EGLAPI_glBindImageTexture].f)
#define glDrawArraysInstancedBaseInstance ((PGLAPIDRAWARRAYSINSTANCEDBASEINSTANCE_PROC)glapi[EGLAPI_glDrawArraysInstancedBaseInstance].f)
#define glDrawElementsInstancedBaseInstance ((PGLAPIDRAWELEMENTSINSTANCEDBASEINSTANCE_PROC)glapi[EGLAPI_glDrawElementsInstancedBaseInstance].f)
#define glDrawElementsInstancedBaseVertexBaseInstance ((PGLAPIDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCE_PROC)glapi[EGLAPI_glDrawElementsInstancedBaseVertexBaseInstance].f)
#define glDrawTransformFeedbackInstanced ((PGLAPIDRAWTRANSFORMFEEDBACKINSTANCED_PROC)glapi[EGLAPI_glDrawTransformFeedbackInstanced].f)
#define glDrawTransformFeedbackStreamInstanced ((PGLAPIDRAWTRANSFORMFEEDBACKSTREAMINSTANCED_PROC)glapi[EGLAPI_glDrawTransformFeedbackStreamInstanced].f)
#define glGetActiveAtomicCounterBufferiv ((PGLAPIGETACTIVEATOMICCOUNTERBUFFERIV_PROC)glapi[EGLAPI_glGetActiveAtomicCounterBufferiv].f)
#define glGetInternalformativ ((PGLAPIGETINTERNALFORMATIV_PROC)glapi[EGLAPI_glGetInternalformativ].f)
#define glMemoryBarrier ((PGLAPIMEMORYBARRIER_PROC)glapi[EGLAPI_glMemoryBarrier].f)

#define GL_VERSION_4_3

typedef void (GLAPICALL * PGLAPIBINDVERTEXBUFFER_PROC)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (GLAPICALL * PGLAPICLEARBUFFERDATA_PROC)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data);
typedef void (GLAPICALL * PGLAPICLEARBUFFERSUBDATA_PROC)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
typedef void (GLAPICALL * PGLAPICOPYIMAGESUBDATA_PROC)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
typedef void (GLAPICALL * PGLAPIDEBUGMESSAGECALLBACK_PROC)(GLDEBUGPROC callback, const void * userParam);
typedef void (GLAPICALL * PGLAPIDEBUGMESSAGECONTROL_PROC)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);
typedef void (GLAPICALL * PGLAPIDEBUGMESSAGEINSERT_PROC)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf);
typedef void (GLAPICALL * PGLAPIDISPATCHCOMPUTE_PROC)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
typedef void (GLAPICALL * PGLAPIDISPATCHCOMPUTEINDIRECT_PROC)(GLintptr indirect);
typedef void (GLAPICALL * PGLAPIFRAMEBUFFERPARAMETERI_PROC)(GLenum target, GLenum pname, GLint param);
typedef GLuint (GLAPICALL * PGLAPIGETDEBUGMESSAGELOG_PROC)(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);
typedef void (GLAPICALL * PGLAPIGETFRAMEBUFFERPARAMETERIV_PROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAPICALL * PGLAPIGETINTERNALFORMATI64V_PROC)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 * params);
typedef void (GLAPICALL * PGLAPIGETOBJECTLABEL_PROC)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label);
typedef void (GLAPICALL * PGLAPIGETOBJECTPTRLABEL_PROC)(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label);
typedef void (GLAPICALL * PGLAPIGETPOINTERV_PROC)(GLenum pname, void ** params);
typedef void (GLAPICALL * PGLAPIGETPROGRAMINTERFACEIV_PROC)(GLuint program, GLenum programInterface, GLenum pname, GLint * params);
typedef GLuint (GLAPICALL * PGLAPIGETPROGRAMRESOURCEINDEX_PROC)(GLuint program, GLenum programInterface, const GLchar * name);
typedef GLint (GLAPICALL * PGLAPIGETPROGRAMRESOURCELOCATION_PROC)(GLuint program, GLenum programInterface, const GLchar * name);
typedef GLint (GLAPICALL * PGLAPIGETPROGRAMRESOURCELOCATIONINDEX_PROC)(GLuint program, GLenum programInterface, const GLchar * name);
typedef void (GLAPICALL * PGLAPIGETPROGRAMRESOURCENAME_PROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
typedef void (GLAPICALL * PGLAPIGETPROGRAMRESOURCEIV_PROC)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLint * params);
typedef void (GLAPICALL * PGLAPIINVALIDATEBUFFERDATA_PROC)(GLuint buffer);
typedef void (GLAPICALL * PGLAPIINVALIDATEBUFFERSUBDATA_PROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (GLAPICALL * PGLAPIINVALIDATEFRAMEBUFFER_PROC)(GLenum target, GLsizei numAttachments, const GLenum * attachments);
typedef void (GLAPICALL * PGLAPIINVALIDATESUBFRAMEBUFFER_PROC)(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAPICALL * PGLAPIINVALIDATETEXIMAGE_PROC)(GLuint texture, GLint level);
typedef void (GLAPICALL * PGLAPIINVALIDATETEXSUBIMAGE_PROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
typedef void (GLAPICALL * PGLAPIMULTIDRAWARRAYSINDIRECT_PROC)(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride);
typedef void (GLAPICALL * PGLAPIMULTIDRAWELEMENTSINDIRECT_PROC)(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride);
typedef void (GLAPICALL * PGLAPIOBJECTLABEL_PROC)(GLenum identifier, GLuint name, GLsizei length, const GLchar * label);
typedef void (GLAPICALL * PGLAPIOBJECTPTRLABEL_PROC)(const void * ptr, GLsizei length, const GLchar * label);
typedef void (GLAPICALL * PGLAPIPOPDEBUGGROUP_PROC)(void);
typedef void (GLAPICALL * PGLAPIPUSHDEBUGGROUP_PROC)(GLenum source, GLuint id, GLsizei length, const GLchar * message);
typedef void (GLAPICALL * PGLAPISHADERSTORAGEBLOCKBINDING_PROC)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
typedef void (GLAPICALL * PGLAPITEXTUREVIEW_PROC)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
typedef void (GLAPICALL * PGLAPIVERTEXATTRIBBINDING_PROC)(GLuint attribindex, GLuint bindingindex);
typedef void (GLAPICALL * PGLAPIVERTEXATTRIBFORMAT_PROC)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (GLAPICALL * PGLAPIVERTEXATTRIBIFORMAT_PROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAPICALL * PGLAPIVERTEXATTRIBLFORMAT_PROC)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAPICALL * PGLAPIVERTEXBINDINGDIVISOR_PROC)(GLuint bindingindex, GLuint divisor);

#define glBindVertexBuffer ((PGLAPIBINDVERTEXBUFFER_PROC)glapi[EGLAPI_glBindVertexBuffer].f)
#define glClearBufferData ((PGLAPICLEARBUFFERDATA_PROC)glapi[EGLAPI_glClearBufferData].f)
#define glClearBufferSubData ((PGLAPICLEARBUFFERSUBDATA_PROC)glapi[EGLAPI_glClearBufferSubData].f)
#define glCopyImageSubData ((PGLAPICOPYIMAGESUBDATA_PROC)glapi[EGLAPI_glCopyImageSubData].f)
#define glDebugMessageCallback ((PGLAPIDEBUGMESSAGECALLBACK_PROC)glapi[EGLAPI_glDebugMessageCallback].f)
#define glDebugMessageControl ((PGLAPIDEBUGMESSAGECONTROL_PROC)glapi[EGLAPI_glDebugMessageControl].f)
#define glDebugMessageInsert ((PGLAPIDEBUGMESSAGEINSERT_PROC)glapi[EGLAPI_glDebugMessageInsert].f)
#define glDispatchCompute ((PGLAPIDISPATCHCOMPUTE_PROC)glapi[EGLAPI_glDispatchCompute].f)
#define glDispatchComputeIndirect ((PGLAPIDISPATCHCOMPUTEINDIRECT_PROC)glapi[EGLAPI_glDispatchComputeIndirect].f)
#define glFramebufferParameteri ((PGLAPIFRAMEBUFFERPARAMETERI_PROC)glapi[EGLAPI_glFramebufferParameteri].f)
#define glGetDebugMessageLog ((PGLAPIGETDEBUGMESSAGELOG_PROC)glapi[EGLAPI_glGetDebugMessageLog].f)
#define glGetFramebufferParameteriv ((PGLAPIGETFRAMEBUFFERPARAMETERIV_PROC)glapi[EGLAPI_glGetFramebufferParameteriv].f)
#define glGetInternalformati64v ((PGLAPIGETINTERNALFORMATI64V_PROC)glapi[EGLAPI_glGetInternalformati64v].f)
#define glGetObjectLabel ((PGLAPIGETOBJECTLABEL_PROC)glapi[EGLAPI_glGetObjectLabel].f)
#define glGetObjectPtrLabel ((PGLAPIGETOBJECTPTRLABEL_PROC)glapi[EGLAPI_glGetObjectPtrLabel].f)
#define glGetPointerv ((PGLAPIGETPOINTERV_PROC)glapi[EGLAPI_glGetPointerv].f)
#define glGetProgramInterfaceiv ((PGLAPIGETPROGRAMINTERFACEIV_PROC)glapi[EGLAPI_glGetProgramInterfaceiv].f)
#define glGetProgramResourceIndex ((PGLAPIGETPROGRAMRESOURCEINDEX_PROC)glapi[EGLAPI_glGetProgramResourceIndex].f)
#define glGetProgramResourceLocation ((PGLAPIGETPROGRAMRESOURCELOCATION_PROC)glapi[EGLAPI_glGetProgramResourceLocation].f)
#define glGetProgramResourceLocationIndex ((PGLAPIGETPROGRAMRESOURCELOCATIONINDEX_PROC)glapi[EGLAPI_glGetProgramResourceLocationIndex].f)
#define glGetProgramResourceName ((PGLAPIGETPROGRAMRESOURCENAME_PROC)glapi[EGLAPI_glGetProgramResourceName].f)
#define glGetProgramResourceiv ((PGLAPIGETPROGRAMRESOURCEIV_PROC)glapi[EGLAPI_glGetProgramResourceiv].f)
#define glInvalidateBufferData ((PGLAPIINVALIDATEBUFFERDATA_PROC)glapi[EGLAPI_glInvalidateBufferData].f)
#define glInvalidateBufferSubData ((PGLAPIINVALIDATEBUFFERSUBDATA_PROC)glapi[EGLAPI_glInvalidateBufferSubData].f)
#define glInvalidateFramebuffer ((PGLAPIINVALIDATEFRAMEBUFFER_PROC)glapi[EGLAPI_glInvalidateFramebuffer].f)
#define glInvalidateSubFramebuffer ((PGLAPIINVALIDATESUBFRAMEBUFFER_PROC)glapi[EGLAPI_glInvalidateSubFramebuffer].f)
#define glInvalidateTexImage ((PGLAPIINVALIDATETEXIMAGE_PROC)glapi[EGLAPI_glInvalidateTexImage].f)
#define glInvalidateTexSubImage ((PGLAPIINVALIDATETEXSUBIMAGE_PROC)glapi[EGLAPI_glInvalidateTexSubImage].f)
#define glMultiDrawArraysIndirect ((PGLAPIMULTIDRAWARRAYSINDIRECT_PROC)glapi[EGLAPI_glMultiDrawArraysIndirect].f)
#define glMultiDrawElementsIndirect ((PGLAPIMULTIDRAWELEMENTSINDIRECT_PROC)glapi[EGLAPI_glMultiDrawElementsIndirect].f)
#define glObjectLabel ((PGLAPIOBJECTLABEL_PROC)glapi[EGLAPI_glObjectLabel].f)
#define glObjectPtrLabel ((PGLAPIOBJECTPTRLABEL_PROC)glapi[EGLAPI_glObjectPtrLabel].f)
#define glPopDebugGroup ((PGLAPIPOPDEBUGGROUP_PROC)glapi[EGLAPI_glPopDebugGroup].f)
#define glPushDebugGroup ((PGLAPIPUSHDEBUGGROUP_PROC)glapi[EGLAPI_glPushDebugGroup].f)
#define glShaderStorageBlockBinding ((PGLAPISHADERSTORAGEBLOCKBINDING_PROC)glapi[EGLAPI_glShaderStorageBlockBinding].f)
#define glTextureView ((PGLAPITEXTUREVIEW_PROC)glapi[EGLAPI_glTextureView].f)
#define glVertexAttribBinding ((PGLAPIVERTEXATTRIBBINDING_PROC)glapi[EGLAPI_glVertexAttribBinding].f)
#define glVertexAttribFormat ((PGLAPIVERTEXATTRIBFORMAT_PROC)glapi[EGLAPI_glVertexAttribFormat].f)
#define glVertexAttribIFormat ((PGLAPIVERTEXATTRIBIFORMAT_PROC)glapi[EGLAPI_glVertexAttribIFormat].f)
#define glVertexAttribLFormat ((PGLAPIVERTEXATTRIBLFORMAT_PROC)glapi[EGLAPI_glVertexAttribLFormat].f)
#define glVertexBindingDivisor ((PGLAPIVERTEXBINDINGDIVISOR_PROC)glapi[EGLAPI_glVertexBindingDivisor].f)

#define GL_VERSION_4_4

typedef void (GLAPICALL * PGLAPIBINDBUFFERSBASE_PROC)(GLenum target, GLuint first, GLsizei count, const GLuint * buffers);
typedef void (GLAPICALL * PGLAPIBINDBUFFERSRANGE_PROC)(GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes);
typedef void (GLAPICALL * PGLAPIBINDIMAGETEXTURES_PROC)(GLuint first, GLsizei count, const GLuint * textures);
typedef void (GLAPICALL * PGLAPIBINDSAMPLERS_PROC)(GLuint first, GLsizei count, const GLuint * samplers);
typedef void (GLAPICALL * PGLAPIBINDTEXTURES_PROC)(GLuint first, GLsizei count, const GLuint * textures);
typedef void (GLAPICALL * PGLAPIBINDVERTEXBUFFERS_PROC)(GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);
typedef void (GLAPICALL * PGLAPIBUFFERSTORAGE_PROC)(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags);
typedef void (GLAPICALL * PGLAPICLEARTEXIMAGE_PROC)(GLuint texture, GLint level, GLenum format, GLenum type, const void * data);
typedef void (GLAPICALL * PGLAPICLEARTEXSUBIMAGE_PROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data);

#define glBindBuffersBase ((PGLAPIBINDBUFFERSBASE_PROC)glapi[EGLAPI_glBindBuffersBase].f)
#define glBindBuffersRange ((PGLAPIBINDBUFFERSRANGE_PROC)glapi[EGLAPI_glBindBuffersRange].f)
#define glBindImageTextures ((PGLAPIBINDIMAGETEXTURES_PROC)glapi[EGLAPI_glBindImageTextures].f)
#define glBindSamplers ((PGLAPIBINDSAMPLERS_PROC)glapi[EGLAPI_glBindSamplers].f)
#define glBindTextures ((PGLAPIBINDTEXTURES_PROC)glapi[EGLAPI_glBindTextures].f)
#define glBindVertexBuffers ((PGLAPIBINDVERTEXBUFFERS_PROC)glapi[EGLAPI_glBindVertexBuffers].f)
#define glBufferStorage ((PGLAPIBUFFERSTORAGE_PROC)glapi[EGLAPI_glBufferStorage].f)
#define glClearTexImage ((PGLAPICLEARTEXIMAGE_PROC)glapi[EGLAPI_glClearTexImage].f)
#define glClearTexSubImage ((PGLAPICLEARTEXSUBIMAGE_PROC)glapi[EGLAPI_glClearTexSubImage].f)

#define GL_VERSION_4_5

typedef void (GLAPICALL * PGLAPIBINDTEXTUREUNIT_PROC)(GLuint unit, GLuint texture);
typedef void (GLAPICALL * PGLAPIBLITNAMEDFRAMEBUFFER_PROC)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef GLenum (GLAPICALL * PGLAPICHECKNAMEDFRAMEBUFFERSTATUS_PROC)(GLuint framebuffer, GLenum target);
typedef void (GLAPICALL * PGLAPICLEARNAMEDBUFFERDATA_PROC)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data);
typedef void (GLAPICALL * PGLAPICLEARNAMEDBUFFERSUBDATA_PROC)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
typedef void (GLAPICALL * PGLAPICLEARNAMEDFRAMEBUFFERFI_PROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
typedef void (GLAPICALL * PGLAPICLEARNAMEDFRAMEBUFFERFV_PROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value);
typedef void (GLAPICALL * PGLAPICLEARNAMEDFRAMEBUFFERIV_PROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value);
typedef void (GLAPICALL * PGLAPICLEARNAMEDFRAMEBUFFERUIV_PROC)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value);
typedef void (GLAPICALL * PGLAPICLIPCONTROL_PROC)(GLenum origin, GLenum depth);
typedef void (GLAPICALL * PGLAPICOMPRESSEDTEXTURESUBIMAGE1D_PROC)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAPICALL * PGLAPICOMPRESSEDTEXTURESUBIMAGE2D_PROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAPICALL * PGLAPICOMPRESSEDTEXTURESUBIMAGE3D_PROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
typedef void (GLAPICALL * PGLAPICOPYNAMEDBUFFERSUBDATA_PROC)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (GLAPICALL * PGLAPICOPYTEXTURESUBIMAGE1D_PROC)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAPICALL * PGLAPICOPYTEXTURESUBIMAGE2D_PROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAPICALL * PGLAPICOPYTEXTURESUBIMAGE3D_PROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAPICALL * PGLAPICREATEBUFFERS_PROC)(GLsizei n, GLuint * buffers);
typedef void (GLAPICALL * PGLAPICREATEFRAMEBUFFERS_PROC)(GLsizei n, GLuint * framebuffers);
typedef void (GLAPICALL * PGLAPICREATEPROGRAMPIPELINES_PROC)(GLsizei n, GLuint * pipelines);
typedef void (GLAPICALL * PGLAPICREATEQUERIES_PROC)(GLenum target, GLsizei n, GLuint * ids);
typedef void (GLAPICALL * PGLAPICREATERENDERBUFFERS_PROC)(GLsizei n, GLuint * renderbuffers);
typedef void (GLAPICALL * PGLAPICREATESAMPLERS_PROC)(GLsizei n, GLuint * samplers);
typedef void (GLAPICALL * PGLAPICREATETEXTURES_PROC)(GLenum target, GLsizei n, GLuint * textures);
typedef void (GLAPICALL * PGLAPICREATETRANSFORMFEEDBACKS_PROC)(GLsizei n, GLuint * ids);
typedef void (GLAPICALL * PGLAPICREATEVERTEXARRAYS_PROC)(GLsizei n, GLuint * arrays);
typedef void (GLAPICALL * PGLAPIDISABLEVERTEXARRAYATTRIB_PROC)(GLuint vaobj, GLuint index);
typedef void (GLAPICALL * PGLAPIENABLEVERTEXARRAYATTRIB_PROC)(GLuint vaobj, GLuint index);
typedef void (GLAPICALL * PGLAPIFLUSHMAPPEDNAMEDBUFFERRANGE_PROC)(GLuint buffer, GLintptr offset, GLsizeiptr length);
typedef void (GLAPICALL * PGLAPIGENERATETEXTUREMIPMAP_PROC)(GLuint texture);
typedef void (GLAPICALL * PGLAPIGETCOMPRESSEDTEXTUREIMAGE_PROC)(GLuint texture, GLint level, GLsizei bufSize, void * pixels);
typedef void (GLAPICALL * PGLAPIGETCOMPRESSEDTEXTURESUBIMAGE_PROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels);
typedef GLenum (GLAPICALL * PGLAPIGETGRAPHICSRESETSTATUS_PROC)(void);
typedef void (GLAPICALL * PGLAPIGETNAMEDBUFFERPARAMETERI64V_PROC)(GLuint buffer, GLenum pname, GLint64 * params);
typedef void (GLAPICALL * PGLAPIGETNAMEDBUFFERPARAMETERIV_PROC)(GLuint buffer, GLenum pname, GLint * params);
typedef void (GLAPICALL * PGLAPIGETNAMEDBUFFERPOINTERV_PROC)(GLuint buffer, GLenum pname, void ** params);
typedef void (GLAPICALL * PGLAPIGETNAMEDBUFFERSUBDATA_PROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data);
typedef void (GLAPICALL * PGLAPIGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIV_PROC)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params);
typedef void (GLAPICALL * PGLAPIGETNAMEDFRAMEBUFFERPARAMETERIV_PROC)(GLuint framebuffer, GLenum pname, GLint * param);
typedef void (GLAPICALL * PGLAPIGETNAMEDRENDERBUFFERPARAMETERIV_PROC)(GLuint renderbuffer, GLenum pname, GLint * params);
typedef void (GLAPICALL * PGLAPIGETQUERYBUFFEROBJECTI64V_PROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (GLAPICALL * PGLAPIGETQUERYBUFFEROBJECTIV_PROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (GLAPICALL * PGLAPIGETQUERYBUFFEROBJECTUI64V_PROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (GLAPICALL * PGLAPIGETQUERYBUFFEROBJECTUIV_PROC)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
typedef void (GLAPICALL * PGLAPIGETTEXTUREIMAGE_PROC)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
typedef void (GLAPICALL * PGLAPIGETTEXTURELEVELPARAMETERFV_PROC)(GLuint texture, GLint level, GLenum pname, GLfloat * params);
typedef void (GLAPICALL * PGLAPIGETTEXTURELEVELPARAMETERIV_PROC)(GLuint texture, GLint level, GLenum pname, GLint * params);
typedef void (GLAPICALL * PGLAPIGETTEXTUREPARAMETERIIV_PROC)(GLuint texture, GLenum pname, GLint * params);
typedef void (GLAPICALL * PGLAPIGETTEXTUREPARAMETERIUIV_PROC)(GLuint texture, GLenum pname, GLuint * params);
typedef void (GLAPICALL * PGLAPIGETTEXTUREPARAMETERFV_PROC)(GLuint texture, GLenum pname, GLfloat * params);
typedef void (GLAPICALL * PGLAPIGETTEXTUREPARAMETERIV_PROC)(GLuint texture, GLenum pname, GLint * params);
typedef void (GLAPICALL * PGLAPIGETTEXTURESUBIMAGE_PROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
typedef void (GLAPICALL * PGLAPIGETTRANSFORMFEEDBACKI64_V_PROC)(GLuint xfb, GLenum pname, GLuint index, GLint64 * param);
typedef void (GLAPICALL * PGLAPIGETTRANSFORMFEEDBACKI_V_PROC)(GLuint xfb, GLenum pname, GLuint index, GLint * param);
typedef void (GLAPICALL * PGLAPIGETTRANSFORMFEEDBACKIV_PROC)(GLuint xfb, GLenum pname, GLint * param);
typedef void (GLAPICALL * PGLAPIGETVERTEXARRAYINDEXED64IV_PROC)(GLuint vaobj, GLuint index, GLenum pname, GLint64 * param);
typedef void (GLAPICALL * PGLAPIGETVERTEXARRAYINDEXEDIV_PROC)(GLuint vaobj, GLuint index, GLenum pname, GLint * param);
typedef void (GLAPICALL * PGLAPIGETVERTEXARRAYIV_PROC)(GLuint vaobj, GLenum pname, GLint * param);
typedef void (GLAPICALL * PGLAPIGETNCOMPRESSEDTEXIMAGE_PROC)(GLenum target, GLint lod, GLsizei bufSize, void * pixels);
typedef void (GLAPICALL * PGLAPIGETNTEXIMAGE_PROC)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
typedef void (GLAPICALL * PGLAPIGETNUNIFORMDV_PROC)(GLuint program, GLint location, GLsizei bufSize, GLdouble * params);
typedef void (GLAPICALL * PGLAPIGETNUNIFORMFV_PROC)(GLuint program, GLint location, GLsizei bufSize, GLfloat * params);
typedef void (GLAPICALL * PGLAPIGETNUNIFORMIV_PROC)(GLuint program, GLint location, GLsizei bufSize, GLint * params);
typedef void (GLAPICALL * PGLAPIGETNUNIFORMUIV_PROC)(GLuint program, GLint location, GLsizei bufSize, GLuint * params);
typedef void (GLAPICALL * PGLAPIINVALIDATENAMEDFRAMEBUFFERDATA_PROC)(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments);
typedef void (GLAPICALL * PGLAPIINVALIDATENAMEDFRAMEBUFFERSUBDATA_PROC)(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void * (GLAPICALL * PGLAPIMAPNAMEDBUFFER_PROC)(GLuint buffer, GLenum access);
typedef void * (GLAPICALL * PGLAPIMAPNAMEDBUFFERRANGE_PROC)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
typedef void (GLAPICALL * PGLAPIMEMORYBARRIERBYREGION_PROC)(GLbitfield barriers);
typedef void (GLAPICALL * PGLAPINAMEDBUFFERDATA_PROC)(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage);
typedef void (GLAPICALL * PGLAPINAMEDBUFFERSTORAGE_PROC)(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags);
typedef void (GLAPICALL * PGLAPINAMEDBUFFERSUBDATA_PROC)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data);
typedef void (GLAPICALL * PGLAPINAMEDFRAMEBUFFERDRAWBUFFER_PROC)(GLuint framebuffer, GLenum buf);
typedef void (GLAPICALL * PGLAPINAMEDFRAMEBUFFERDRAWBUFFERS_PROC)(GLuint framebuffer, GLsizei n, const GLenum * bufs);
typedef void (GLAPICALL * PGLAPINAMEDFRAMEBUFFERPARAMETERI_PROC)(GLuint framebuffer, GLenum pname, GLint param);
typedef void (GLAPICALL * PGLAPINAMEDFRAMEBUFFERREADBUFFER_PROC)(GLuint framebuffer, GLenum src);
typedef void (GLAPICALL * PGLAPINAMEDFRAMEBUFFERRENDERBUFFER_PROC)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
typedef void (GLAPICALL * PGLAPINAMEDFRAMEBUFFERTEXTURE_PROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
typedef void (GLAPICALL * PGLAPINAMEDFRAMEBUFFERTEXTURELAYER_PROC)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
typedef void (GLAPICALL * PGLAPINAMEDRENDERBUFFERSTORAGE_PROC)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAPICALL * PGLAPINAMEDRENDERBUFFERSTORAGEMULTISAMPLE_PROC)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAPICALL * PGLAPIREADNPIXELS_PROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data);
typedef void (GLAPICALL * PGLAPITEXTUREBARRIER_PROC)(void);
typedef void (GLAPICALL * PGLAPITEXTUREBUFFER_PROC)(GLuint texture, GLenum internalformat, GLuint buffer);
typedef void (GLAPICALL * PGLAPITEXTUREBUFFERRANGE_PROC)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef void (GLAPICALL * PGLAPITEXTUREPARAMETERIIV_PROC)(GLuint texture, GLenum pname, const GLint * params);
typedef void (GLAPICALL * PGLAPITEXTUREPARAMETERIUIV_PROC)(GLuint texture, GLenum pname, const GLuint * params);
typedef void (GLAPICALL * PGLAPITEXTUREPARAMETERF_PROC)(GLuint texture, GLenum pname, GLfloat param);
typedef void (GLAPICALL * PGLAPITEXTUREPARAMETERFV_PROC)(GLuint texture, GLenum pname, const GLfloat * param);
typedef void (GLAPICALL * PGLAPITEXTUREPARAMETERI_PROC)(GLuint texture, GLenum pname, GLint param);
typedef void (GLAPICALL * PGLAPITEXTUREPARAMETERIV_PROC)(GLuint texture, GLenum pname, const GLint * param);
typedef void (GLAPICALL * PGLAPITEXTURESTORAGE1D_PROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
typedef void (GLAPICALL * PGLAPITEXTURESTORAGE2D_PROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
typedef void (GLAPICALL * PGLAPITEXTURESTORAGE2DMULTISAMPLE_PROC)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
typedef void (GLAPICALL * PGLAPITEXTURESTORAGE3D_PROC)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
typedef void (GLAPICALL * PGLAPITEXTURESTORAGE3DMULTISAMPLE_PROC)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
typedef void (GLAPICALL * PGLAPITEXTURESUBIMAGE1D_PROC)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (GLAPICALL * PGLAPITEXTURESUBIMAGE2D_PROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAPICALL * PGLAPITEXTURESUBIMAGE3D_PROC)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
typedef void (GLAPICALL * PGLAPITRANSFORMFEEDBACKBUFFERBASE_PROC)(GLuint xfb, GLuint index, GLuint buffer);
typedef void (GLAPICALL * PGLAPITRANSFORMFEEDBACKBUFFERRANGE_PROC)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
typedef GLboolean (GLAPICALL * PGLAPIUNMAPNAMEDBUFFER_PROC)(GLuint buffer);
typedef void (GLAPICALL * PGLAPIVERTEXARRAYATTRIBBINDING_PROC)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
typedef void (GLAPICALL * PGLAPIVERTEXARRAYATTRIBFORMAT_PROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
typedef void (GLAPICALL * PGLAPIVERTEXARRAYATTRIBIFORMAT_PROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAPICALL * PGLAPIVERTEXARRAYATTRIBLFORMAT_PROC)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
typedef void (GLAPICALL * PGLAPIVERTEXARRAYBINDINGDIVISOR_PROC)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
typedef void (GLAPICALL * PGLAPIVERTEXARRAYELEMENTBUFFER_PROC)(GLuint vaobj, GLuint buffer);
typedef void (GLAPICALL * PGLAPIVERTEXARRAYVERTEXBUFFER_PROC)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
typedef void (GLAPICALL * PGLAPIVERTEXARRAYVERTEXBUFFERS_PROC)(GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);

#define glBindTextureUnit ((PGLAPIBINDTEXTUREUNIT_PROC)glapi[EGLAPI_glBindTextureUnit].f)
#define glBlitNamedFramebuffer ((PGLAPIBLITNAMEDFRAMEBUFFER_PROC)glapi[EGLAPI_glBlitNamedFramebuffer].f)
#define glCheckNamedFramebufferStatus ((PGLAPICHECKNAMEDFRAMEBUFFERSTATUS_PROC)glapi[EGLAPI_glCheckNamedFramebufferStatus].f)
#define glClearNamedBufferData ((PGLAPICLEARNAMEDBUFFERDATA_PROC)glapi[EGLAPI_glClearNamedBufferData].f)
#define glClearNamedBufferSubData ((PGLAPICLEARNAMEDBUFFERSUBDATA_PROC)glapi[EGLAPI_glClearNamedBufferSubData].f)
#define glClearNamedFramebufferfi ((PGLAPICLEARNAMEDFRAMEBUFFERFI_PROC)glapi[EGLAPI_glClearNamedFramebufferfi].f)
#define glClearNamedFramebufferfv ((PGLAPICLEARNAMEDFRAMEBUFFERFV_PROC)glapi[EGLAPI_glClearNamedFramebufferfv].f)
#define glClearNamedFramebufferiv ((PGLAPICLEARNAMEDFRAMEBUFFERIV_PROC)glapi[EGLAPI_glClearNamedFramebufferiv].f)
#define glClearNamedFramebufferuiv ((PGLAPICLEARNAMEDFRAMEBUFFERUIV_PROC)glapi[EGLAPI_glClearNamedFramebufferuiv].f)
#define glClipControl ((PGLAPICLIPCONTROL_PROC)glapi[EGLAPI_glClipControl].f)
#define glCompressedTextureSubImage1D ((PGLAPICOMPRESSEDTEXTURESUBIMAGE1D_PROC)glapi[EGLAPI_glCompressedTextureSubImage1D].f)
#define glCompressedTextureSubImage2D ((PGLAPICOMPRESSEDTEXTURESUBIMAGE2D_PROC)glapi[EGLAPI_glCompressedTextureSubImage2D].f)
#define glCompressedTextureSubImage3D ((PGLAPICOMPRESSEDTEXTURESUBIMAGE3D_PROC)glapi[EGLAPI_glCompressedTextureSubImage3D].f)
#define glCopyNamedBufferSubData ((PGLAPICOPYNAMEDBUFFERSUBDATA_PROC)glapi[EGLAPI_glCopyNamedBufferSubData].f)
#define glCopyTextureSubImage1D ((PGLAPICOPYTEXTURESUBIMAGE1D_PROC)glapi[EGLAPI_glCopyTextureSubImage1D].f)
#define glCopyTextureSubImage2D ((PGLAPICOPYTEXTURESUBIMAGE2D_PROC)glapi[EGLAPI_glCopyTextureSubImage2D].f)
#define glCopyTextureSubImage3D ((PGLAPICOPYTEXTURESUBIMAGE3D_PROC)glapi[EGLAPI_glCopyTextureSubImage3D].f)
#define glCreateBuffers ((PGLAPICREATEBUFFERS_PROC)glapi[EGLAPI_glCreateBuffers].f)
#define glCreateFramebuffers ((PGLAPICREATEFRAMEBUFFERS_PROC)glapi[EGLAPI_glCreateFramebuffers].f)
#define glCreateProgramPipelines ((PGLAPICREATEPROGRAMPIPELINES_PROC)glapi[EGLAPI_glCreateProgramPipelines].f)
#define glCreateQueries ((PGLAPICREATEQUERIES_PROC)glapi[EGLAPI_glCreateQueries].f)
#define glCreateRenderbuffers ((PGLAPICREATERENDERBUFFERS_PROC)glapi[EGLAPI_glCreateRenderbuffers].f)
#define glCreateSamplers ((PGLAPICREATESAMPLERS_PROC)glapi[EGLAPI_glCreateSamplers].f)
#define glCreateTextures ((PGLAPICREATETEXTURES_PROC)glapi[EGLAPI_glCreateTextures].f)
#define glCreateTransformFeedbacks ((PGLAPICREATETRANSFORMFEEDBACKS_PROC)glapi[EGLAPI_glCreateTransformFeedbacks].f)
#define glCreateVertexArrays ((PGLAPICREATEVERTEXARRAYS_PROC)glapi[EGLAPI_glCreateVertexArrays].f)
#define glDisableVertexArrayAttrib ((PGLAPIDISABLEVERTEXARRAYATTRIB_PROC)glapi[EGLAPI_glDisableVertexArrayAttrib].f)
#define glEnableVertexArrayAttrib ((PGLAPIENABLEVERTEXARRAYATTRIB_PROC)glapi[EGLAPI_glEnableVertexArrayAttrib].f)
#define glFlushMappedNamedBufferRange ((PGLAPIFLUSHMAPPEDNAMEDBUFFERRANGE_PROC)glapi[EGLAPI_glFlushMappedNamedBufferRange].f)
#define glGenerateTextureMipmap ((PGLAPIGENERATETEXTUREMIPMAP_PROC)glapi[EGLAPI_glGenerateTextureMipmap].f)
#define glGetCompressedTextureImage ((PGLAPIGETCOMPRESSEDTEXTUREIMAGE_PROC)glapi[EGLAPI_glGetCompressedTextureImage].f)
#define glGetCompressedTextureSubImage ((PGLAPIGETCOMPRESSEDTEXTURESUBIMAGE_PROC)glapi[EGLAPI_glGetCompressedTextureSubImage].f)
#define glGetGraphicsResetStatus ((PGLAPIGETGRAPHICSRESETSTATUS_PROC)glapi[EGLAPI_glGetGraphicsResetStatus].f)
#define glGetNamedBufferParameteri64v ((PGLAPIGETNAMEDBUFFERPARAMETERI64V_PROC)glapi[EGLAPI_glGetNamedBufferParameteri64v].f)
#define glGetNamedBufferParameteriv ((PGLAPIGETNAMEDBUFFERPARAMETERIV_PROC)glapi[EGLAPI_glGetNamedBufferParameteriv].f)
#define glGetNamedBufferPointerv ((PGLAPIGETNAMEDBUFFERPOINTERV_PROC)glapi[EGLAPI_glGetNamedBufferPointerv].f)
#define glGetNamedBufferSubData ((PGLAPIGETNAMEDBUFFERSUBDATA_PROC)glapi[EGLAPI_glGetNamedBufferSubData].f)
#define glGetNamedFramebufferAttachmentParameteriv ((PGLAPIGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIV_PROC)glapi[EGLAPI_glGetNamedFramebufferAttachmentParameteriv].f)
#define glGetNamedFramebufferParameteriv ((PGLAPIGETNAMEDFRAMEBUFFERPARAMETERIV_PROC)glapi[EGLAPI_glGetNamedFramebufferParameteriv].f)
#define glGetNamedRenderbufferParameteriv ((PGLAPIGETNAMEDRENDERBUFFERPARAMETERIV_PROC)glapi[EGLAPI_glGetNamedRenderbufferParameteriv].f)
#define glGetQueryBufferObjecti64v ((PGLAPIGETQUERYBUFFEROBJECTI64V_PROC)glapi[EGLAPI_glGetQueryBufferObjecti64v].f)
#define glGetQueryBufferObjectiv ((PGLAPIGETQUERYBUFFEROBJECTIV_PROC)glapi[EGLAPI_glGetQueryBufferObjectiv].f)
#define glGetQueryBufferObjectui64v ((PGLAPIGETQUERYBUFFEROBJECTUI64V_PROC)glapi[EGLAPI_glGetQueryBufferObjectui64v].f)
#define glGetQueryBufferObjectuiv ((PGLAPIGETQUERYBUFFEROBJECTUIV_PROC)glapi[EGLAPI_glGetQueryBufferObjectuiv].f)
#define glGetTextureImage ((PGLAPIGETTEXTUREIMAGE_PROC)glapi[EGLAPI_glGetTextureImage].f)
#define glGetTextureLevelParameterfv ((PGLAPIGETTEXTURELEVELPARAMETERFV_PROC)glapi[EGLAPI_glGetTextureLevelParameterfv].f)
#define glGetTextureLevelParameteriv ((PGLAPIGETTEXTURELEVELPARAMETERIV_PROC)glapi[EGLAPI_glGetTextureLevelParameteriv].f)
#define glGetTextureParameterIiv ((PGLAPIGETTEXTUREPARAMETERIIV_PROC)glapi[EGLAPI_glGetTextureParameterIiv].f)
#define glGetTextureParameterIuiv ((PGLAPIGETTEXTUREPARAMETERIUIV_PROC)glapi[EGLAPI_glGetTextureParameterIuiv].f)
#define glGetTextureParameterfv ((PGLAPIGETTEXTUREPARAMETERFV_PROC)glapi[EGLAPI_glGetTextureParameterfv].f)
#define glGetTextureParameteriv ((PGLAPIGETTEXTUREPARAMETERIV_PROC)glapi[EGLAPI_glGetTextureParameteriv].f)
#define glGetTextureSubImage ((PGLAPIGETTEXTURESUBIMAGE_PROC)glapi[EGLAPI_glGetTextureSubImage].f)
#define glGetTransformFeedbacki64_v ((PGLAPIGETTRANSFORMFEEDBACKI64_V_PROC)glapi[EGLAPI_glGetTransformFeedbacki64_v].f)
#define glGetTransformFeedbacki_v ((PGLAPIGETTRANSFORMFEEDBACKI_V_PROC)glapi[EGLAPI_glGetTransformFeedbacki_v].f)
#define glGetTransformFeedbackiv ((PGLAPIGETTRANSFORMFEEDBACKIV_PROC)glapi[EGLAPI_glGetTransformFeedbackiv].f)
#define glGetVertexArrayIndexed64iv ((PGLAPIGETVERTEXARRAYINDEXED64IV_PROC)glapi[EGLAPI_glGetVertexArrayIndexed64iv].f)
#define glGetVertexArrayIndexediv ((PGLAPIGETVERTEXARRAYINDEXEDIV_PROC)glapi[EGLAPI_glGetVertexArrayIndexediv].f)
#define glGetVertexArrayiv ((PGLAPIGETVERTEXARRAYIV_PROC)glapi[EGLAPI_glGetVertexArrayiv].f)
#define glGetnCompressedTexImage ((PGLAPIGETNCOMPRESSEDTEXIMAGE_PROC)glapi[EGLAPI_glGetnCompressedTexImage].f)
#define glGetnTexImage ((PGLAPIGETNTEXIMAGE_PROC)glapi[EGLAPI_glGetnTexImage].f)
#define glGetnUniformdv ((PGLAPIGETNUNIFORMDV_PROC)glapi[EGLAPI_glGetnUniformdv].f)
#define glGetnUniformfv ((PGLAPIGETNUNIFORMFV_PROC)glapi[EGLAPI_glGetnUniformfv].f)
#define glGetnUniformiv ((PGLAPIGETNUNIFORMIV_PROC)glapi[EGLAPI_glGetnUniformiv].f)
#define glGetnUniformuiv ((PGLAPIGETNUNIFORMUIV_PROC)glapi[EGLAPI_glGetnUniformuiv].f)
#define glInvalidateNamedFramebufferData ((PGLAPIINVALIDATENAMEDFRAMEBUFFERDATA_PROC)glapi[EGLAPI_glInvalidateNamedFramebufferData].f)
#define glInvalidateNamedFramebufferSubData ((PGLAPIINVALIDATENAMEDFRAMEBUFFERSUBDATA_PROC)glapi[EGLAPI_glInvalidateNamedFramebufferSubData].f)
#define glMapNamedBuffer ((PGLAPIMAPNAMEDBUFFER_PROC)glapi[EGLAPI_glMapNamedBuffer].f)
#define glMapNamedBufferRange ((PGLAPIMAPNAMEDBUFFERRANGE_PROC)glapi[EGLAPI_glMapNamedBufferRange].f)
#define glMemoryBarrierByRegion ((PGLAPIMEMORYBARRIERBYREGION_PROC)glapi[EGLAPI_glMemoryBarrierByRegion].f)
#define glNamedBufferData ((PGLAPINAMEDBUFFERDATA_PROC)glapi[EGLAPI_glNamedBufferData].f)
#define glNamedBufferStorage ((PGLAPINAMEDBUFFERSTORAGE_PROC)glapi[EGLAPI_glNamedBufferStorage].f)
#define glNamedBufferSubData ((PGLAPINAMEDBUFFERSUBDATA_PROC)glapi[EGLAPI_glNamedBufferSubData].f)
#define glNamedFramebufferDrawBuffer ((PGLAPINAMEDFRAMEBUFFERDRAWBUFFER_PROC)glapi[EGLAPI_glNamedFramebufferDrawBuffer].f)
#define glNamedFramebufferDrawBuffers ((PGLAPINAMEDFRAMEBUFFERDRAWBUFFERS_PROC)glapi[EGLAPI_glNamedFramebufferDrawBuffers].f)
#define glNamedFramebufferParameteri ((PGLAPINAMEDFRAMEBUFFERPARAMETERI_PROC)glapi[EGLAPI_glNamedFramebufferParameteri].f)
#define glNamedFramebufferReadBuffer ((PGLAPINAMEDFRAMEBUFFERREADBUFFER_PROC)glapi[EGLAPI_glNamedFramebufferReadBuffer].f)
#define glNamedFramebufferRenderbuffer ((PGLAPINAMEDFRAMEBUFFERRENDERBUFFER_PROC)glapi[EGLAPI_glNamedFramebufferRenderbuffer].f)
#define glNamedFramebufferTexture ((PGLAPINAMEDFRAMEBUFFERTEXTURE_PROC)glapi[EGLAPI_glNamedFramebufferTexture].f)
#define glNamedFramebufferTextureLayer ((PGLAPINAMEDFRAMEBUFFERTEXTURELAYER_PROC)glapi[EGLAPI_glNamedFramebufferTextureLayer].f)
#define glNamedRenderbufferStorage ((PGLAPINAMEDRENDERBUFFERSTORAGE_PROC)glapi[EGLAPI_glNamedRenderbufferStorage].f)
#define glNamedRenderbufferStorageMultisample ((PGLAPINAMEDRENDERBUFFERSTORAGEMULTISAMPLE_PROC)glapi[EGLAPI_glNamedRenderbufferStorageMultisample].f)
#define glReadnPixels ((PGLAPIREADNPIXELS_PROC)glapi[EGLAPI_glReadnPixels].f)
#define glTextureBarrier ((PGLAPITEXTUREBARRIER_PROC)glapi[EGLAPI_glTextureBarrier].f)
#define glTextureBuffer ((PGLAPITEXTUREBUFFER_PROC)glapi[EGLAPI_glTextureBuffer].f)
#define glTextureBufferRange ((PGLAPITEXTUREBUFFERRANGE_PROC)glapi[EGLAPI_glTextureBufferRange].f)
#define glTextureParameterIiv ((PGLAPITEXTUREPARAMETERIIV_PROC)glapi[EGLAPI_glTextureParameterIiv].f)
#define glTextureParameterIuiv ((PGLAPITEXTUREPARAMETERIUIV_PROC)glapi[EGLAPI_glTextureParameterIuiv].f)
#define glTextureParameterf ((PGLAPITEXTUREPARAMETERF_PROC)glapi[EGLAPI_glTextureParameterf].f)
#define glTextureParameterfv ((PGLAPITEXTUREPARAMETERFV_PROC)glapi[EGLAPI_glTextureParameterfv].f)
#define glTextureParameteri ((PGLAPITEXTUREPARAMETERI_PROC)glapi[EGLAPI_glTextureParameteri].f)
#define glTextureParameteriv ((PGLAPITEXTUREPARAMETERIV_PROC)glapi[EGLAPI_glTextureParameteriv].f)
#define glTextureStorage1D ((PGLAPITEXTURESTORAGE1D_PROC)glapi[EGLAPI_glTextureStorage1D].f)
#define glTextureStorage2D ((PGLAPITEXTURESTORAGE2D_PROC)glapi[EGLAPI_glTextureStorage2D].f)
#define glTextureStorage2DMultisample ((PGLAPITEXTURESTORAGE2DMULTISAMPLE_PROC)glapi[EGLAPI_glTextureStorage2DMultisample].f)
#define glTextureStorage3D ((PGLAPITEXTURESTORAGE3D_PROC)glapi[EGLAPI_glTextureStorage3D].f)
#define glTextureStorage3DMultisample ((PGLAPITEXTURESTORAGE3DMULTISAMPLE_PROC)glapi[EGLAPI_glTextureStorage3DMultisample].f)
#define glTextureSubImage1D ((PGLAPITEXTURESUBIMAGE1D_PROC)glapi[EGLAPI_glTextureSubImage1D].f)
#define glTextureSubImage2D ((PGLAPITEXTURESUBIMAGE2D_PROC)glapi[EGLAPI_glTextureSubImage2D].f)
#define glTextureSubImage3D ((PGLAPITEXTURESUBIMAGE3D_PROC)glapi[EGLAPI_glTextureSubImage3D].f)
#define glTransformFeedbackBufferBase ((PGLAPITRANSFORMFEEDBACKBUFFERBASE_PROC)glapi[EGLAPI_glTransformFeedbackBufferBase].f)
#define glTransformFeedbackBufferRange ((PGLAPITRANSFORMFEEDBACKBUFFERRANGE_PROC)glapi[EGLAPI_glTransformFeedbackBufferRange].f)
#define glUnmapNamedBuffer ((PGLAPIUNMAPNAMEDBUFFER_PROC)glapi[EGLAPI_glUnmapNamedBuffer].f)
#define glVertexArrayAttribBinding ((PGLAPIVERTEXARRAYATTRIBBINDING_PROC)glapi[EGLAPI_glVertexArrayAttribBinding].f)
#define glVertexArrayAttribFormat ((PGLAPIVERTEXARRAYATTRIBFORMAT_PROC)glapi[EGLAPI_glVertexArrayAttribFormat].f)
#define glVertexArrayAttribIFormat ((PGLAPIVERTEXARRAYATTRIBIFORMAT_PROC)glapi[EGLAPI_glVertexArrayAttribIFormat].f)
#define glVertexArrayAttribLFormat ((PGLAPIVERTEXARRAYATTRIBLFORMAT_PROC)glapi[EGLAPI_glVertexArrayAttribLFormat].f)
#define glVertexArrayBindingDivisor ((PGLAPIVERTEXARRAYBINDINGDIVISOR_PROC)glapi[EGLAPI_glVertexArrayBindingDivisor].f)
#define glVertexArrayElementBuffer ((PGLAPIVERTEXARRAYELEMENTBUFFER_PROC)glapi[EGLAPI_glVertexArrayElementBuffer].f)
#define glVertexArrayVertexBuffer ((PGLAPIVERTEXARRAYVERTEXBUFFER_PROC)glapi[EGLAPI_glVertexArrayVertexBuffer].f)
#define glVertexArrayVertexBuffers ((PGLAPIVERTEXARRAYVERTEXBUFFERS_PROC)glapi[EGLAPI_glVertexArrayVertexBuffers].f)


void importOpenGL(void);

#ifdef __cplusplus
}
#endif
